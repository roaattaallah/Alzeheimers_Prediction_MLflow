{"version":3,"sources":["components/ModelSelector.js","components/PatientForm_new.js","components/InputForm.js","components/PredictionResult.js","App.js","index.js"],"names":["valueMappings","Gender","0","1","Ethnicity","2","3","EducationLevel","Smoking","FamilyHistoryAlzheimers","CardiovascularDisease","Diabetes","Depression","HeadInjury","Hypertension","MemoryComplaints","BehavioralProblems","Confusion","Disorientation","PersonalityChanges","DifficultyCompletingTasks","Forgetfulness","ModelSelector","_ref","models","selectedModel","onChange","expandedModel","setExpandedModel","React","useState","Object","keys","length","createElement","Card","sx","mb","boxShadow","bgcolor","borderTop","CardContent","Box","display","alignItems","MemoryIcon","color","mr","Typography","variant","Divider","FormControl","fullWidth","InputLabel","id","Select","labelId","value","label","entries","map","_ref2","name","details","displayName","getModelDisplayName","MenuItem","key","width","justifyContent","is_best","CheckCircleIcon","fontSize","NeuralNetworkIcon","Chip","accuracy","toFixed","size","roc_auc","mt","p","borderRadius","Grid","container","spacing","item","xs","flexDirection","parameters","params","onClick","modelName","cursor","padding","backgroundColor","InfoIcon","ExpandLessIcon","ml","ExpandMoreIcon","Collapse","in","_ref3","param","formatParameterValue","undefined","Number","isInteger","healthyPatientProfile","Age","BMI","AlcoholConsumption","PhysicalActivity","DietQuality","SleepQuality","SystolicBP","DiastolicBP","CholesterolTotal","CholesterolLDL","CholesterolHDL","CholesterolTriglycerides","MMSE","FunctionalAssessment","ADL","alzheimersPatientProfile","PatientForm","features","onSubmit","formData","setFormData","missingValues","setMissingValues","console","log","Date","toISOString","loadProfile","profile","useEffect","initialFormData","forEach","feature","getDefaultValueForFeature","isBinaryField","includes","handleInputChange","e","target","prevState","filter","toggleMissingValue","fieldName","isScaleField","scaleFields","createCategoricalMenuItems","parseInt","gutterBottom","paragraph","ButtonGroup","aria-label","Button","preventDefault","submissionData","field","sm","md","TextField","select","disabled","margin","Tooltip","title","IconButton","HelpOutlineIcon","FormControlLabel","control","Checkbox","checked","maxScale","max","items","i","push","createScaleMenuItems","type","InputProps","inputProps","step","InputForm","onPredict","loading","featureDescriptions","PredictionResult","prediction","isHighRisk","risk","borderLeft","fontWeight","icon","WarningIcon","probability","model_type","App","setLoading","setModels","setFeatures","setSelectedModel","setPrediction","error","setError","async","modelsResponse","axios","get","featuresResponse","processedModels","data","modelDetails","bestModel","find","_","reduce","best","_ref4","err","fetchData","Container","maxWidth","my","component","align","Paper","CircularProgress","Fragment","event","response","post","model_name","patientData","window","scrollTo","top","behavior","theme","createTheme","palette","primary","main","secondary","background","default","ReactDOM","createRoot","document","getElementById","render","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.c3a0f128.chunk.js","sourcesContent":["import React from 'react';\nimport { \n  Card, \n  CardContent, \n  FormControl, \n  InputLabel, \n  Select, \n  MenuItem, \n  Typography, \n  Box,\n  Chip,\n  Collapse,\n  Divider,\n  Grid\n} from '@mui/material';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport InfoIcon from '@mui/icons-material/Info';\nimport MemoryIcon from '@mui/icons-material/Memory';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport NeuralNetworkIcon from '@mui/icons-material/Hub';  // Using Hub icon for neural network\n\n// Dictionary for mapping numeric codes to human-readable values (same as in other components)\nconst valueMappings = {\n  Gender: {\n    0: 'Male',\n    1: 'Female'\n  },\n  Ethnicity: {\n    0: 'Caucasian',\n    1: 'African American',\n    2: 'Asian',\n    3: 'Other'\n  },\n  EducationLevel: {\n    0: 'None',\n    1: 'High School',\n    2: 'Bachelor\\'s',\n    3: 'Higher'\n  },\n  Smoking: {\n    0: 'No',\n    1: 'Yes'\n  },\n  FamilyHistoryAlzheimers: {\n    0: 'No',\n    1: 'Yes'\n  },\n  CardiovascularDisease: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Diabetes: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Depression: {\n    0: 'No',\n    1: 'Yes'\n  },\n  HeadInjury: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Hypertension: {\n    0: 'No',\n    1: 'Yes'\n  },\n  MemoryComplaints: {\n    0: 'No',\n    1: 'Yes'\n  },\n  BehavioralProblems: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Confusion: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Disorientation: {\n    0: 'No',\n    1: 'Yes'\n  },\n  PersonalityChanges: {\n    0: 'No',\n    1: 'Yes'\n  },\n  DifficultyCompletingTasks: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Forgetfulness: {\n    0: 'No',\n    1: 'Yes'\n  }\n};\n\nconst ModelSelector = ({ models, selectedModel, onChange }) => {\n  const [expandedModel, setExpandedModel] = React.useState(null);\n\n  if (!models || Object.keys(models).length === 0) {\n    return null;\n  }\n\n  const handleExpandClick = (modelName) => {\n    setExpandedModel(expandedModel === modelName ? null : modelName);\n  };\n\n  const formatParameterValue = (param, value) => {\n    // Check if this parameter has a human-readable mapping\n    if (valueMappings[param] && valueMappings[param][value] !== undefined) {\n      return valueMappings[param][value];\n    }\n    \n    // Otherwise format as before\n    if (typeof value === 'number') {\n      // Format number to 3 decimal places if it has decimals\n      return Number.isInteger(value) ? value : value.toFixed(3);\n    }\n    return value;\n  };\n\n  // Get model display name\n  const getModelDisplayName = (name) => {\n    switch(name) {\n      case 'rf': return 'Random Forest';\n      case 'logistic': return 'Logistic Regression';\n      case 'xgboost': return 'XGBoost';\n      case 'svm': return 'SVM';\n      case 'knn': return 'KNN';\n      case 'nn': return 'Neural Network';\n      default: return name;\n    }\n  };\n\n  return (\n    <Card sx={{ \n      mb: 3, \n      boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n      bgcolor: 'rgba(25, 118, 210, 0.03)',\n      borderTop: '4px solid #1976d2'\n    }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <MemoryIcon color=\"primary\" sx={{ mr: 1 }} />\n          <Typography variant=\"h6\" color=\"primary\">\n            ML Model Selection\n          </Typography>\n        </Box>\n        \n        <Divider sx={{ mb: 2 }} />\n        \n        <FormControl fullWidth variant=\"outlined\" sx={{ mb: 2 }}>\n          <InputLabel id=\"model-select-label\">Select Prediction Model</InputLabel>\n          <Select\n            labelId=\"model-select-label\"\n            id=\"model-select\"\n            value={selectedModel}\n            label=\"Select Prediction Model\"\n            onChange={onChange}\n          >\n            {Object.entries(models).map(([name, details]) => {\n              // Get display name using our helper function\n              const displayName = getModelDisplayName(name);\n              \n              return (\n                <MenuItem key={name} value={name}>\n                  <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      {details.is_best && <CheckCircleIcon color=\"success\" fontSize=\"small\" sx={{ mr: 0.5 }} />}\n                      {name === 'nn' && <NeuralNetworkIcon fontSize=\"small\" sx={{ mr: 0.5, color: 'secondary.main' }} />}\n                      <span>{displayName}</span>\n                    </Box>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Chip \n                        label={`Acc: ${(details.accuracy * 100).toFixed(1)}%`} \n                        size=\"small\" \n                        color={details.is_best ? \"success\" : \"primary\"}\n                        variant={details.is_best ? \"filled\" : \"outlined\"}\n                        sx={{ mr: 1 }}\n                      />\n                      {details.roc_auc && (\n                        <Chip \n                          label={`ROC: ${(details.roc_auc * 100).toFixed(1)}%`} \n                          size=\"small\" \n                          color={details.is_best ? \"success\" : \"secondary\"}\n                          variant={details.is_best ? \"filled\" : \"outlined\"}\n                        />\n                      )}\n                    </Box>\n                  </Box>\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n        \n        {selectedModel && models[selectedModel] && (\n          <Box sx={{ mt: 2 }}>\n            {models[selectedModel].is_best && (\n              <Box sx={{ \n                display: 'flex', \n                alignItems: 'center', \n                p: 1, \n                bgcolor: 'rgba(76, 175, 80, 0.1)', \n                borderRadius: 1,\n                mb: 2 \n              }}>\n                <CheckCircleIcon color=\"success\" fontSize=\"small\" sx={{ mr: 1 }} />\n                <Typography variant=\"body2\" color=\"success.dark\">\n                  This is the best performing model based on ROC AUC score\n                </Typography>\n              </Box>\n            )}\n            \n            {/* Model metrics display */}\n            <Box sx={{ mb: 2 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <Box sx={{ \n                    display: 'flex', \n                    flexDirection: 'column', \n                    alignItems: 'center',\n                    p: 1,\n                    borderRadius: 1,\n                    bgcolor: 'rgba(25, 118, 210, 0.05)'\n                  }}>\n                    <Typography variant=\"caption\" color=\"text.secondary\">Accuracy</Typography>\n                    <Typography variant=\"h6\" color=\"primary\">\n                      {(models[selectedModel].accuracy * 100).toFixed(1)}%\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={6}>\n                  <Box sx={{ \n                    display: 'flex', \n                    flexDirection: 'column', \n                    alignItems: 'center',\n                    p: 1,\n                    borderRadius: 1,\n                    bgcolor: 'rgba(156, 39, 176, 0.05)'\n                  }}>\n                    <Typography variant=\"caption\" color=\"text.secondary\">ROC AUC</Typography>\n                    <Typography variant=\"h6\" color=\"secondary\">\n                      {models[selectedModel].roc_auc \n                        ? (models[selectedModel].roc_auc * 100).toFixed(1) + '%' \n                        : 'N/A'}\n                    </Typography>\n                  </Box>\n                </Grid>\n              </Grid>\n            </Box>\n            \n            {/* Model type specific info */}\n            {selectedModel === 'nn' && (\n              <Box sx={{ \n                display: 'flex', \n                alignItems: 'center', \n                p: 1,\n                mb: 2,\n                bgcolor: 'rgba(156, 39, 176, 0.05)', \n                borderRadius: 1\n              }}>\n                <NeuralNetworkIcon color=\"secondary\" fontSize=\"small\" sx={{ mr: 1 }} />\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Deep neural network with multiple hidden layers\n                </Typography>\n              </Box>\n            )}\n            \n            {/* Check for parameters using both keys for backward compatibility */}\n            {((models[selectedModel].parameters && Object.keys(models[selectedModel].parameters).length > 0) || \n              (models[selectedModel].params && Object.keys(models[selectedModel].params).length > 0)) && (\n              <Box sx={{ mt: 2 }}>\n                <Box \n                  onClick={() => handleExpandClick(selectedModel)}\n                  sx={{ \n                    display: 'flex', \n                    alignItems: 'center', \n                    cursor: 'pointer',\n                    padding: '4px 8px',\n                    borderRadius: '4px',\n                    '&:hover': {\n                      backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                    }\n                  }}\n                >\n                  <InfoIcon fontSize=\"small\" sx={{ mr: 1, color: 'primary.main' }} />\n                  <Typography variant=\"body2\" color=\"primary\">\n                    Model Hyperparameters (Tuned)\n                  </Typography>\n                  {expandedModel === selectedModel ? \n                    <ExpandLessIcon fontSize=\"small\" sx={{ ml: 1 }} /> : \n                    <ExpandMoreIcon fontSize=\"small\" sx={{ ml: 1 }} />\n                  }\n                </Box>\n                \n                <Collapse in={expandedModel === selectedModel}>\n                  <Box \n                    sx={{ \n                      mt: 1, \n                      ml: 2,\n                      padding: 1.5,\n                      backgroundColor: 'rgba(0, 0, 0, 0.02)',\n                      borderRadius: 1\n                    }}\n                  >\n                    {/* Use parameters or params, whichever is available */}\n                    {Object.entries(models[selectedModel].parameters || models[selectedModel].params || {}).map(([param, value]) => (\n                      <Typography key={param} variant=\"body2\" sx={{ mb: 0.5 }}>\n                        <strong>{param}:</strong> {formatParameterValue(param, value)}\n                      </Typography>\n                    ))}\n                  </Box>\n                </Collapse>\n              </Box>\n            )}\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ModelSelector; ","import React, { useState, useEffect } from 'react';\nimport { \n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  TextField,\n  MenuItem,\n  Button,\n  FormControlLabel,\n  Checkbox,\n  Box,\n  Tooltip,\n  IconButton,\n  ButtonGroup\n} from '@mui/material';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\n\n// Dictionary for mapping numeric codes to human-readable values\nconst valueMappings = {\n  Gender: {\n    0: 'Male',\n    1: 'Female'\n  },\n  Ethnicity: {\n    0: 'Caucasian',\n    1: 'African American',\n    2: 'Asian',\n    3: 'Other'\n  },\n  EducationLevel: {\n    0: 'None',\n    1: 'High School',\n    2: 'Bachelor\\'s',\n    3: 'Higher'\n  },\n  Smoking: {\n    0: 'No',\n    1: 'Yes'\n  },\n  FamilyHistoryAlzheimers: {\n    0: 'No',\n    1: 'Yes'\n  },\n  CardiovascularDisease: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Diabetes: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Depression: {\n    0: 'No',\n    1: 'Yes'\n  },\n  HeadInjury: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Hypertension: {\n    0: 'No',\n    1: 'Yes'\n  },\n  MemoryComplaints: {\n    0: 'No',\n    1: 'Yes'\n  },\n  BehavioralProblems: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Confusion: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Disorientation: {\n    0: 'No',\n    1: 'Yes'\n  },\n  PersonalityChanges: {\n    0: 'No',\n    1: 'Yes'\n  },\n  DifficultyCompletingTasks: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Forgetfulness: {\n    0: 'No',\n    1: 'Yes'\n  }\n};\n\n// Initial values for healthy patient\nconst healthyPatientProfile = {\n  Age: 52.0,\n  Gender: 0.0,\n  Ethnicity: 0.0,\n  EducationLevel: 3.0,\n  BMI: 23.5,\n  Smoking: 0.0,\n  AlcoholConsumption: 1.0,\n  PhysicalActivity: 3.0,\n  DietQuality: 5.0,\n  SleepQuality: 5.0,\n  FamilyHistoryAlzheimers: 0.0,\n  CardiovascularDisease: 0.0,\n  Diabetes: 0.0,\n  Depression: 0.0,\n  HeadInjury: 0.0,\n  Hypertension: 0.0,\n  SystolicBP: 115.0,\n  DiastolicBP: 75.0,\n  CholesterolTotal: 150.0,\n  CholesterolLDL: 70.0,\n  CholesterolHDL: 65.0,\n  CholesterolTriglycerides: 80.0,\n  MMSE: 30.0,\n  FunctionalAssessment: 10.0,\n  MemoryComplaints: 0.0,\n  BehavioralProblems: 0.0,\n  ADL: 10.0,\n  Confusion: 0.0,\n  Disorientation: 0.0,\n  PersonalityChanges: 0.0,\n  DifficultyCompletingTasks: 0.0,\n  Forgetfulness: 0.0\n};\n\n// Initial values for Alzheimer's patient\nconst alzheimersPatientProfile = {\n  Age: 92.0,\n  Gender: 1.0,\n  Ethnicity: 1.0,\n  EducationLevel: 0.0,\n  BMI: 18.0,\n  Smoking: 1.0,\n  AlcoholConsumption: 3.0,\n  PhysicalActivity: 0.0,\n  DietQuality: 1.0,\n  SleepQuality: 1.0,\n  FamilyHistoryAlzheimers: 1.0,\n  CardiovascularDisease: 1.0,\n  Diabetes: 1.0,\n  Depression: 1.0,\n  HeadInjury: 1.0,\n  Hypertension: 1.0,\n  SystolicBP: 175.0,\n  DiastolicBP: 95.0,\n  CholesterolTotal: 280.0,\n  CholesterolLDL: 180.0,\n  CholesterolHDL: 30.0,\n  CholesterolTriglycerides: 250.0,\n  MMSE: 5.0,\n  FunctionalAssessment: 2.0,\n  MemoryComplaints: 1.0,\n  BehavioralProblems: 1.0,\n  ADL: 2.0,\n  Confusion: 1.0,\n  Disorientation: 1.0,\n  PersonalityChanges: 1.0,\n  DifficultyCompletingTasks: 1.0,\n  Forgetfulness: 1.0\n};\n\nconst PatientForm = ({ features, onSubmit }) => {\n  // State initialization\n  const [formData, setFormData] = useState(healthyPatientProfile);\n  const [missingValues, setMissingValues] = useState([]);\n  \n  // Version stamp to verify which version is loaded\n  console.log(\"PatientForm Version: REBUILT WITH BUTTONS - \" + new Date().toISOString());\n\n  // Function to load a patient profile\n  const loadProfile = (profile) => {\n    setFormData(profile);\n    setMissingValues([]);\n  };\n\n  // Initialize all fields from API feature descriptions\n  useEffect(() => {\n    if (features && Object.keys(features).length > 0) {\n      const initialFormData = {...formData};\n      \n      // For each feature from the API, ensure we have a value in our form\n      Object.keys(features).forEach(feature => {\n        if (!(feature in initialFormData)) {\n          initialFormData[feature] = getDefaultValueForFeature(feature);\n        }\n      });\n      \n      setFormData(initialFormData);\n    }\n  }, [features]);\n\n  // Helper function to get a default value based on feature type\n  const getDefaultValueForFeature = (feature) => {\n    if (isBinaryField(feature)) return 0;\n    if (feature.includes(\"Cholesterol\")) return 150;\n    if (feature === \"SystolicBP\") return 120;\n    if (feature === \"DiastolicBP\") return 80;\n    if (feature === \"BMI\") return 25;\n    return 0;\n  };\n\n  if (!features || Object.keys(features).length === 0) {\n    return null;\n  }\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n    \n    // Remove from missing values if it was marked as missing\n    if (missingValues.includes(name)) {\n      setMissingValues(missingValues.filter(item => item !== name));\n    }\n  };\n\n  const toggleMissingValue = (name) => {\n    if (missingValues.includes(name)) {\n      setMissingValues(missingValues.filter(item => item !== name));\n    } else {\n      setMissingValues([...missingValues, name]);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    // Create a copy of the form data\n    const submissionData = { ...formData };\n    \n    // Set missing values to null\n    missingValues.forEach(field => {\n      submissionData[field] = null;\n    });\n    \n    onSubmit(submissionData);\n  };\n\n  // Helper function to determine if a field should be a select or text input\n  const isBinaryField = (fieldName) => {\n    return fieldName in valueMappings && Object.keys(valueMappings[fieldName]).length === 2;\n  };\n\n  const isCategoricalField = (fieldName) => {\n    return fieldName in valueMappings && Object.keys(valueMappings[fieldName]).length > 2;\n  };\n\n  const isScaleField = (fieldName) => {\n    const scaleFields = {\n      'AlcoholConsumption': 3,\n      'PhysicalActivity': 3,\n      'DietQuality': 5,\n      'SleepQuality': 5\n    };\n    return fieldName in scaleFields ? scaleFields[fieldName] : false;\n  };\n\n  // Create menu items for a scale\n  const createScaleMenuItems = (max) => {\n    const items = [];\n    for (let i = 0; i <= max; i++) {\n      items.push(<MenuItem key={i} value={i}>{i}</MenuItem>);\n    }\n    return items;\n  };\n\n  // Create menu items for categorical fields\n  const createCategoricalMenuItems = (fieldName) => {\n    if (!valueMappings[fieldName]) return null;\n    \n    return Object.entries(valueMappings[fieldName]).map(([value, label]) => (\n      <MenuItem key={value} value={parseInt(value, 10)}>{label}</MenuItem>\n    ));\n  };\n\n  const renderFeatureInputs = () => {\n    return Object.keys(features).map(feature => {\n      // Skip rendering if feature isn't in our form data or API features\n      if (!(feature in formData)) return null;\n      \n      if (isBinaryField(feature)) {\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                select\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                {createCategoricalMenuItems(feature)}\n              </TextField>\n              <Tooltip title={features[feature] || `${feature} value`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      } else if (isCategoricalField(feature)) {\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                select\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                {createCategoricalMenuItems(feature)}\n              </TextField>\n              <Tooltip title={features[feature] || `${feature} value`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      } else if (isScaleField(feature)) {\n        const maxScale = isScaleField(feature);\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                select\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                {createScaleMenuItems(maxScale)}\n              </TextField>\n              <Tooltip title={`${features[feature]} (Scale 0-${maxScale})`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      } else {\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                type=\"number\"\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                InputProps={{ \n                  inputProps: { \n                    step: feature === 'BMI' ? 0.1 : 1 \n                  } \n                }}\n                variant=\"outlined\"\n                margin=\"normal\"\n              />\n              <Tooltip title={features[feature] || `${feature} value`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      }\n    });\n  };\n\n  return (\n    <Card sx={{ mb: 3 }}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Patient Parameters\n        </Typography>\n        \n        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n          Enter the patient's information below. Missing values will be handled appropriately.\n        </Typography>\n\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"body2\" gutterBottom>\n            Load patient profile:\n          </Typography>\n          <ButtonGroup variant=\"contained\" aria-label=\"profile selection button group\">\n            <Button \n              onClick={() => loadProfile(healthyPatientProfile)}\n              color=\"success\"\n            >\n              Healthy Patient\n            </Button>\n            <Button \n              onClick={() => loadProfile(alzheimersPatientProfile)}\n              color=\"error\"\n            >\n              Alzheimer's Patient\n            </Button>\n          </ButtonGroup>\n        </Box>\n        \n        <form onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            {renderFeatureInputs()}\n            \n            <Grid item xs={12} sx={{ mt: 2 }}>\n              <Button \n                type=\"submit\" \n                variant=\"contained\" \n                color=\"primary\" \n                fullWidth\n                size=\"large\"\n              >\n                Make Prediction\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PatientForm;","import React from 'react';\nimport PatientForm from './PatientForm_new';\n\nconst InputForm = ({ onPredict, loading, featureDescriptions }) => {\n  return (\n    <PatientForm \n      features={featureDescriptions} \n      onSubmit={onPredict} \n    />\n  );\n};\n\nexport default InputForm;","import React from 'react';\nimport { \n  Card, \n  CardContent, \n  Typography, \n  Box,\n  Chip\n} from '@mui/material';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\n\n// Dictionary for mapping numeric codes to human-readable values (same as in PatientForm)\nconst valueMappings = {\n  Gender: {\n    0: 'Male',\n    1: 'Female'\n  },\n  Ethnicity: {\n    0: 'Caucasian',\n    1: 'African American',\n    2: 'Asian',\n    3: 'Other'\n  },\n  EducationLevel: {\n    0: 'None',\n    1: 'High School',\n    2: 'Bachelor\\'s',\n    3: 'Higher'\n  },\n  Smoking: {\n    0: 'No',\n    1: 'Yes'\n  },\n  FamilyHistoryAlzheimers: {\n    0: 'No',\n    1: 'Yes'\n  },\n  CardiovascularDisease: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Diabetes: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Depression: {\n    0: 'No',\n    1: 'Yes'\n  },\n  HeadInjury: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Hypertension: {\n    0: 'No',\n    1: 'Yes'\n  },\n  MemoryComplaints: {\n    0: 'No',\n    1: 'Yes'\n  },\n  BehavioralProblems: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Confusion: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Disorientation: {\n    0: 'No',\n    1: 'Yes'\n  },\n  PersonalityChanges: {\n    0: 'No',\n    1: 'Yes'\n  },\n  DifficultyCompletingTasks: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Forgetfulness: {\n    0: 'No',\n    1: 'Yes'\n  }\n};\n\nconst PredictionResult = ({ prediction }) => {\n  const isHighRisk = prediction.risk === 'High';\n  \n  // Helper function to format model name nicely\n  const formatModelName = (modelName) => {\n    const modelMappings = {\n      'rf': 'Random Forest',\n      'xgboost': 'XGBoost',\n      'logistic': 'Logistic Regression',\n      'svm': 'Support Vector Machine',\n      'knn': 'K-Nearest Neighbors',\n      'nn': 'Neural Network'\n    };\n    \n    return modelMappings[modelName] || modelName;\n  };\n  \n  return (\n    <Card sx={{ \n      mb: 3, \n      bgcolor: isHighRisk ? 'rgba(244, 67, 54, 0.05)' : 'rgba(76, 175, 80, 0.05)',\n      borderLeft: isHighRisk ? '4px solid #f44336' : '4px solid #4caf50',\n      boxShadow: '0 4px 8px rgba(0,0,0,0.1)'\n    }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Typography variant=\"h6\" color={isHighRisk ? 'error' : 'success'} sx={{ fontWeight: 'bold' }}>\n            {isHighRisk ? 'High Risk' : 'Low Risk'}\n          </Typography>\n          <Chip \n            icon={isHighRisk ? <WarningIcon /> : <CheckCircleIcon />}\n            label={prediction.probability ? `${(prediction.probability * 100).toFixed(1)}%` : ''}\n            color={isHighRisk ? 'error' : 'success'}\n          />\n        </Box>\n        \n        <Box sx={{ \n          display: 'flex', \n          flexDirection: 'column', \n          p: 2, \n          borderRadius: 1, \n          bgcolor: 'background.paper',\n        }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Model:\n            </Typography>\n            <Typography variant=\"body2\" fontWeight=\"bold\">\n              {formatModelName(prediction.model_type || \"Unknown\")}\n            </Typography>\n          </Box>\n          \n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Accuracy:\n            </Typography>\n            <Typography variant=\"body2\" fontWeight=\"bold\">\n              {(prediction.accuracy * 100).toFixed(1)}%\n            </Typography>\n          </Box>\n          \n          {prediction.roc_auc && (\n            <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                ROC AUC:\n              </Typography>\n              <Typography variant=\"body2\" fontWeight=\"bold\">\n                {(prediction.roc_auc * 100).toFixed(1)}%\n              </Typography>\n            </Box>\n          )}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PredictionResult; ","import React, { useState, useEffect } from 'react';\nimport { Container, Typography, Box, Paper, CircularProgress, Grid } from '@mui/material';\nimport ModelSelector from './components/ModelSelector';\nimport InputForm from './components/InputForm';\nimport PredictionResult from './components/PredictionResult';\nimport axios from 'axios';\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [models, setModels] = useState({});\n  const [features, setFeatures] = useState({});\n  const [selectedModel, setSelectedModel] = useState('');\n  const [prediction, setPrediction] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch models and features on component mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const modelsResponse = await axios.get('/api/models');\n        const featuresResponse = await axios.get('/api/features');\n        \n        // Process models data to ensure consistent structure\n        const processedModels = {};\n        Object.entries(modelsResponse.data).forEach(([modelName, modelDetails]) => {\n          processedModels[modelName] = {\n            accuracy: modelDetails.accuracy,\n            roc_auc: modelDetails.roc_auc || 0,\n            is_best: modelDetails.is_best,\n            // Ensure parameters are available under a consistent key name\n            parameters: modelDetails.parameters || modelDetails.params || {}\n          };\n        });\n        \n        setModels(processedModels);\n        setFeatures(featuresResponse.data);\n        \n        // Set the best model as default or the one with highest ROC AUC if no best is marked\n        let bestModel = Object.entries(processedModels).find(\n          ([_, details]) => details.is_best\n        );\n        \n        if (!bestModel) {\n          // If no best model is marked, select the one with highest ROC AUC\n          bestModel = Object.entries(processedModels).reduce((best, [name, details]) => {\n            if (!best || (details.roc_auc && details.roc_auc > best[1].roc_auc)) {\n              return [name, details];\n            }\n            return best;\n          }, null);\n          \n          // If no model has ROC AUC, fall back to accuracy\n          if (!bestModel || !bestModel[1].roc_auc) {\n            bestModel = Object.entries(processedModels).reduce((best, [name, details]) => {\n              if (!best || details.accuracy > best[1].accuracy) {\n                return [name, details];\n              }\n              return best;\n            }, null);\n          }\n        }\n        \n        if (bestModel) {\n          setSelectedModel(bestModel[0]);\n        }\n        \n        setError(null);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError('Failed to load models or features. Please check if the backend server is running.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleModelChange = (event) => {\n    setSelectedModel(event.target.value);\n    setPrediction(null);\n  };\n\n  const handleSubmit = async (patientData) => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/predict', {\n        model_name: selectedModel,\n        parameters: patientData\n      });\n      \n      setPrediction(response.data);\n      setError(null);\n      \n      // Scroll to top when prediction is received\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    } catch (err) {\n      console.error('Error making prediction:', err);\n      setError('Failed to make a prediction. Please try again.');\n      setPrediction(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ my: 4 }}>\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\" color=\"primary\">\n          🧠 Alzheimer's Disease Prediction Tool\n        </Typography>\n        \n        <Typography variant=\"subtitle1\" align=\"center\" gutterBottom>\n          This application predicts the likelihood of Alzheimer's disease based on patient parameters using tuned ML models.\n        </Typography>\n\n        {error && (\n          <Paper sx={{ p: 2, my: 2, bgcolor: '#ffebee' }}>\n            <Typography color=\"error\">{error}</Typography>\n          </Paper>\n        )}\n\n        {loading && !error ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : (\n          <>\n            <Grid container spacing={3}>\n              {/* Left side: Model selector and prediction result */}\n              <Grid item xs={12} md={4}>\n                <ModelSelector \n                  models={models} \n                  selectedModel={selectedModel} \n                  onChange={handleModelChange} \n                />\n                \n                {prediction && (\n                  <PredictionResult prediction={prediction} />\n                )}\n              </Grid>\n              \n              {/* Right side: Input form */}\n              <Grid item xs={12} md={8}>\n                <InputForm \n                  onPredict={handleSubmit}\n                  loading={loading}\n                  featureDescriptions={features}\n                />\n              </Grid>\n            </Grid>\n          </>\n        )}\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1976d2',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n); "],"sourceRoot":""}