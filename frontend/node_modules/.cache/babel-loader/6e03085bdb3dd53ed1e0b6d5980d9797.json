{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Card,CardContent,Typography,Grid,TextField,MenuItem,Button,FormControlLabel,Checkbox,Box,Tooltip,IconButton,ButtonGroup}from'@mui/material';import HelpOutlineIcon from'@mui/icons-material/HelpOutline';// Dictionary for mapping numeric codes to human-readable values\nconst valueMappings={Gender:{0:'Male',1:'Female'},Ethnicity:{0:'Caucasian',1:'African American',2:'Asian',3:'Other'},EducationLevel:{0:'None',1:'High School',2:'Bachelor\\'s',3:'Higher'},Smoking:{0:'No',1:'Yes'},FamilyHistoryAlzheimers:{0:'No',1:'Yes'},CardiovascularDisease:{0:'No',1:'Yes'},Diabetes:{0:'No',1:'Yes'},Depression:{0:'No',1:'Yes'},HeadInjury:{0:'No',1:'Yes'},Hypertension:{0:'No',1:'Yes'},MemoryComplaints:{0:'No',1:'Yes'},BehavioralProblems:{0:'No',1:'Yes'},Confusion:{0:'No',1:'Yes'},Disorientation:{0:'No',1:'Yes'},PersonalityChanges:{0:'No',1:'Yes'},DifficultyCompletingTasks:{0:'No',1:'Yes'},Forgetfulness:{0:'No',1:'Yes'}};// Initial values for healthy patient\nconst healthyPatientProfile={Age:52.0,Gender:0.0,Ethnicity:0.0,EducationLevel:3.0,BMI:23.5,Smoking:0.0,AlcoholConsumption:1.0,PhysicalActivity:3.0,DietQuality:5.0,SleepQuality:5.0,FamilyHistoryAlzheimers:0.0,CardiovascularDisease:0.0,Diabetes:0.0,Depression:0.0,HeadInjury:0.0,Hypertension:0.0,SystolicBP:115.0,DiastolicBP:75.0,CholesterolTotal:150.0,CholesterolLDL:70.0,CholesterolHDL:65.0,CholesterolTriglycerides:80.0,MMSE:30.0,FunctionalAssessment:10.0,MemoryComplaints:0.0,BehavioralProblems:0.0,ADL:10.0,Confusion:0.0,Disorientation:0.0,PersonalityChanges:0.0,DifficultyCompletingTasks:0.0,Forgetfulness:0.0};// Initial values for Alzheimer's patient\nconst alzheimersPatientProfile={Age:92.0,Gender:1.0,Ethnicity:1.0,EducationLevel:0.0,BMI:18.0,Smoking:1.0,AlcoholConsumption:3.0,PhysicalActivity:0.0,DietQuality:1.0,SleepQuality:1.0,FamilyHistoryAlzheimers:1.0,CardiovascularDisease:1.0,Diabetes:1.0,Depression:1.0,HeadInjury:1.0,Hypertension:1.0,SystolicBP:175.0,DiastolicBP:95.0,CholesterolTotal:280.0,CholesterolLDL:180.0,CholesterolHDL:30.0,CholesterolTriglycerides:250.0,MMSE:5.0,FunctionalAssessment:2.0,MemoryComplaints:1.0,BehavioralProblems:1.0,ADL:2.0,Confusion:1.0,Disorientation:1.0,PersonalityChanges:1.0,DifficultyCompletingTasks:1.0,Forgetfulness:1.0};const PatientForm=_ref=>{let{features,onSubmit}=_ref;// State initialization\nconst[formData,setFormData]=useState(healthyPatientProfile);const[missingValues,setMissingValues]=useState([]);// Version stamp to verify which version is loaded\nconsole.log(\"PatientForm Version: REBUILT WITH BUTTONS - \"+new Date().toISOString());// Function to load a patient profile\nconst loadProfile=profile=>{setFormData(profile);setMissingValues([]);};// Initialize all fields from API feature descriptions\nuseEffect(()=>{if(features&&Object.keys(features).length>0){const initialFormData={...formData};// For each feature from the API, ensure we have a value in our form\nObject.keys(features).forEach(feature=>{if(!(feature in initialFormData)){initialFormData[feature]=getDefaultValueForFeature(feature);}});setFormData(initialFormData);}},[features]);// Helper function to get a default value based on feature type\nconst getDefaultValueForFeature=feature=>{if(isBinaryField(feature))return 0;if(feature.includes(\"Cholesterol\"))return 150;if(feature===\"SystolicBP\")return 120;if(feature===\"DiastolicBP\")return 80;if(feature===\"BMI\")return 25;return 0;};if(!features||Object.keys(features).length===0){return null;}const handleInputChange=e=>{const{name,value}=e.target;setFormData(prevState=>({...prevState,[name]:value}));// Remove from missing values if it was marked as missing\nif(missingValues.includes(name)){setMissingValues(missingValues.filter(item=>item!==name));}};const toggleMissingValue=name=>{if(missingValues.includes(name)){setMissingValues(missingValues.filter(item=>item!==name));}else{setMissingValues([...missingValues,name]);}};const handleSubmit=e=>{e.preventDefault();// Create a copy of the form data\nconst submissionData={...formData};// Set missing values to null\nmissingValues.forEach(field=>{submissionData[field]=null;});onSubmit(submissionData);};// Helper function to determine if a field should be a select or text input\nconst isBinaryField=fieldName=>{return fieldName in valueMappings&&Object.keys(valueMappings[fieldName]).length===2;};const isCategoricalField=fieldName=>{return fieldName in valueMappings&&Object.keys(valueMappings[fieldName]).length>2;};const isScaleField=fieldName=>{const scaleFields={'AlcoholConsumption':3,'PhysicalActivity':3,'DietQuality':5,'SleepQuality':5};return fieldName in scaleFields?scaleFields[fieldName]:false;};// Create menu items for a scale\nconst createScaleMenuItems=max=>{const items=[];for(let i=0;i<=max;i++){items.push(/*#__PURE__*/React.createElement(MenuItem,{key:i,value:i},i));}return items;};// Create menu items for categorical fields\nconst createCategoricalMenuItems=fieldName=>{if(!valueMappings[fieldName])return null;return Object.entries(valueMappings[fieldName]).map(_ref2=>{let[value,label]=_ref2;return/*#__PURE__*/React.createElement(MenuItem,{key:value,value:parseInt(value,10)},label);});};const renderFeatureInputs=()=>{return Object.keys(features).map(feature=>{// Skip rendering if feature isn't in our form data or API features\nif(!(feature in formData))return null;if(isBinaryField(feature)){return/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:6,md:4,key:feature},/*#__PURE__*/React.createElement(Box,{sx:{display:'flex',alignItems:'flex-start'}},/*#__PURE__*/React.createElement(TextField,{name:feature,label:feature,fullWidth:true,select:true,value:missingValues.includes(feature)?'':formData[feature],onChange:handleInputChange,disabled:missingValues.includes(feature),variant:\"outlined\",margin:\"normal\"},createCategoricalMenuItems(feature)),/*#__PURE__*/React.createElement(Tooltip,{title:features[feature]||`${feature} value`},/*#__PURE__*/React.createElement(IconButton,{size:\"small\",sx:{mt:2.5,ml:1}},/*#__PURE__*/React.createElement(HelpOutlineIcon,{fontSize:\"small\"})))),/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(Checkbox,{checked:missingValues.includes(feature),onChange:()=>toggleMissingValue(feature)}),label:\"Missing value\"}));}else if(isCategoricalField(feature)){return/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:6,md:4,key:feature},/*#__PURE__*/React.createElement(Box,{sx:{display:'flex',alignItems:'flex-start'}},/*#__PURE__*/React.createElement(TextField,{name:feature,label:feature,fullWidth:true,select:true,value:missingValues.includes(feature)?'':formData[feature],onChange:handleInputChange,disabled:missingValues.includes(feature),variant:\"outlined\",margin:\"normal\"},createCategoricalMenuItems(feature)),/*#__PURE__*/React.createElement(Tooltip,{title:features[feature]||`${feature} value`},/*#__PURE__*/React.createElement(IconButton,{size:\"small\",sx:{mt:2.5,ml:1}},/*#__PURE__*/React.createElement(HelpOutlineIcon,{fontSize:\"small\"})))),/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(Checkbox,{checked:missingValues.includes(feature),onChange:()=>toggleMissingValue(feature)}),label:\"Missing value\"}));}else if(isScaleField(feature)){const maxScale=isScaleField(feature);return/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:6,md:4,key:feature},/*#__PURE__*/React.createElement(Box,{sx:{display:'flex',alignItems:'flex-start'}},/*#__PURE__*/React.createElement(TextField,{name:feature,label:feature,fullWidth:true,select:true,value:missingValues.includes(feature)?'':formData[feature],onChange:handleInputChange,disabled:missingValues.includes(feature),variant:\"outlined\",margin:\"normal\"},createScaleMenuItems(maxScale)),/*#__PURE__*/React.createElement(Tooltip,{title:`${features[feature]} (Scale 0-${maxScale})`},/*#__PURE__*/React.createElement(IconButton,{size:\"small\",sx:{mt:2.5,ml:1}},/*#__PURE__*/React.createElement(HelpOutlineIcon,{fontSize:\"small\"})))),/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(Checkbox,{checked:missingValues.includes(feature),onChange:()=>toggleMissingValue(feature)}),label:\"Missing value\"}));}else{return/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:6,md:4,key:feature},/*#__PURE__*/React.createElement(Box,{sx:{display:'flex',alignItems:'flex-start'}},/*#__PURE__*/React.createElement(TextField,{name:feature,label:feature,fullWidth:true,type:\"number\",value:missingValues.includes(feature)?'':formData[feature],onChange:handleInputChange,disabled:missingValues.includes(feature),InputProps:{inputProps:{step:feature==='BMI'?0.1:1}},variant:\"outlined\",margin:\"normal\"}),/*#__PURE__*/React.createElement(Tooltip,{title:features[feature]||`${feature} value`},/*#__PURE__*/React.createElement(IconButton,{size:\"small\",sx:{mt:2.5,ml:1}},/*#__PURE__*/React.createElement(HelpOutlineIcon,{fontSize:\"small\"})))),/*#__PURE__*/React.createElement(FormControlLabel,{control:/*#__PURE__*/React.createElement(Checkbox,{checked:missingValues.includes(feature),onChange:()=>toggleMissingValue(feature)}),label:\"Missing value\"}));}});};return/*#__PURE__*/React.createElement(Card,{sx:{mb:3}},/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(Typography,{variant:\"h6\",gutterBottom:true},\"Patient Parameters\"),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\",color:\"text.secondary\",paragraph:true},\"Enter the patient's information below. Missing values will be handled appropriately.\"),/*#__PURE__*/React.createElement(Box,{sx:{mb:3}},/*#__PURE__*/React.createElement(Typography,{variant:\"body2\",gutterBottom:true},\"Load patient profile:\"),/*#__PURE__*/React.createElement(ButtonGroup,{variant:\"contained\",\"aria-label\":\"profile selection button group\"},/*#__PURE__*/React.createElement(Button,{onClick:()=>loadProfile(healthyPatientProfile),color:\"success\"},\"Healthy Patient\"),/*#__PURE__*/React.createElement(Button,{onClick:()=>loadProfile(alzheimersPatientProfile),color:\"error\"},\"Alzheimer's Patient\"))),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(Grid,{container:true,spacing:3},renderFeatureInputs(),/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sx:{mt:2}},/*#__PURE__*/React.createElement(Button,{type:\"submit\",variant:\"contained\",color:\"primary\",fullWidth:true,size:\"large\"},\"Make Prediction\"))))));};export default PatientForm;","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","Typography","Grid","TextField","MenuItem","Button","FormControlLabel","Checkbox","Box","Tooltip","IconButton","ButtonGroup","HelpOutlineIcon","valueMappings","Gender","Ethnicity","EducationLevel","Smoking","FamilyHistoryAlzheimers","CardiovascularDisease","Diabetes","Depression","HeadInjury","Hypertension","MemoryComplaints","BehavioralProblems","Confusion","Disorientation","PersonalityChanges","DifficultyCompletingTasks","Forgetfulness","healthyPatientProfile","Age","BMI","AlcoholConsumption","PhysicalActivity","DietQuality","SleepQuality","SystolicBP","DiastolicBP","CholesterolTotal","CholesterolLDL","CholesterolHDL","CholesterolTriglycerides","MMSE","FunctionalAssessment","ADL","alzheimersPatientProfile","PatientForm","_ref","features","onSubmit","formData","setFormData","missingValues","setMissingValues","console","log","Date","toISOString","loadProfile","profile","Object","keys","length","initialFormData","forEach","feature","getDefaultValueForFeature","isBinaryField","includes","handleInputChange","e","name","value","target","prevState","filter","item","toggleMissingValue","handleSubmit","preventDefault","submissionData","field","fieldName","isCategoricalField","isScaleField","scaleFields","createScaleMenuItems","max","items","i","push","createElement","key","createCategoricalMenuItems","entries","map","_ref2","label","parseInt","renderFeatureInputs","xs","sm","md","sx","display","alignItems","fullWidth","select","onChange","disabled","variant","margin","title","size","mt","ml","fontSize","control","checked","maxScale","type","InputProps","inputProps","step","mb","gutterBottom","color","paragraph","onClick","container","spacing"],"sources":["/Users/roaattaallah/Desktop/MLFlow_Project/frontend/src/components/PatientForm_new.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  TextField,\n  MenuItem,\n  Button,\n  FormControlLabel,\n  Checkbox,\n  Box,\n  Tooltip,\n  IconButton,\n  ButtonGroup\n} from '@mui/material';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\n\n// Dictionary for mapping numeric codes to human-readable values\nconst valueMappings = {\n  Gender: {\n    0: 'Male',\n    1: 'Female'\n  },\n  Ethnicity: {\n    0: 'Caucasian',\n    1: 'African American',\n    2: 'Asian',\n    3: 'Other'\n  },\n  EducationLevel: {\n    0: 'None',\n    1: 'High School',\n    2: 'Bachelor\\'s',\n    3: 'Higher'\n  },\n  Smoking: {\n    0: 'No',\n    1: 'Yes'\n  },\n  FamilyHistoryAlzheimers: {\n    0: 'No',\n    1: 'Yes'\n  },\n  CardiovascularDisease: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Diabetes: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Depression: {\n    0: 'No',\n    1: 'Yes'\n  },\n  HeadInjury: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Hypertension: {\n    0: 'No',\n    1: 'Yes'\n  },\n  MemoryComplaints: {\n    0: 'No',\n    1: 'Yes'\n  },\n  BehavioralProblems: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Confusion: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Disorientation: {\n    0: 'No',\n    1: 'Yes'\n  },\n  PersonalityChanges: {\n    0: 'No',\n    1: 'Yes'\n  },\n  DifficultyCompletingTasks: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Forgetfulness: {\n    0: 'No',\n    1: 'Yes'\n  }\n};\n\n// Initial values for healthy patient\nconst healthyPatientProfile = {\n  Age: 52.0,\n  Gender: 0.0,\n  Ethnicity: 0.0,\n  EducationLevel: 3.0,\n  BMI: 23.5,\n  Smoking: 0.0,\n  AlcoholConsumption: 1.0,\n  PhysicalActivity: 3.0,\n  DietQuality: 5.0,\n  SleepQuality: 5.0,\n  FamilyHistoryAlzheimers: 0.0,\n  CardiovascularDisease: 0.0,\n  Diabetes: 0.0,\n  Depression: 0.0,\n  HeadInjury: 0.0,\n  Hypertension: 0.0,\n  SystolicBP: 115.0,\n  DiastolicBP: 75.0,\n  CholesterolTotal: 150.0,\n  CholesterolLDL: 70.0,\n  CholesterolHDL: 65.0,\n  CholesterolTriglycerides: 80.0,\n  MMSE: 30.0,\n  FunctionalAssessment: 10.0,\n  MemoryComplaints: 0.0,\n  BehavioralProblems: 0.0,\n  ADL: 10.0,\n  Confusion: 0.0,\n  Disorientation: 0.0,\n  PersonalityChanges: 0.0,\n  DifficultyCompletingTasks: 0.0,\n  Forgetfulness: 0.0\n};\n\n// Initial values for Alzheimer's patient\nconst alzheimersPatientProfile = {\n  Age: 92.0,\n  Gender: 1.0,\n  Ethnicity: 1.0,\n  EducationLevel: 0.0,\n  BMI: 18.0,\n  Smoking: 1.0,\n  AlcoholConsumption: 3.0,\n  PhysicalActivity: 0.0,\n  DietQuality: 1.0,\n  SleepQuality: 1.0,\n  FamilyHistoryAlzheimers: 1.0,\n  CardiovascularDisease: 1.0,\n  Diabetes: 1.0,\n  Depression: 1.0,\n  HeadInjury: 1.0,\n  Hypertension: 1.0,\n  SystolicBP: 175.0,\n  DiastolicBP: 95.0,\n  CholesterolTotal: 280.0,\n  CholesterolLDL: 180.0,\n  CholesterolHDL: 30.0,\n  CholesterolTriglycerides: 250.0,\n  MMSE: 5.0,\n  FunctionalAssessment: 2.0,\n  MemoryComplaints: 1.0,\n  BehavioralProblems: 1.0,\n  ADL: 2.0,\n  Confusion: 1.0,\n  Disorientation: 1.0,\n  PersonalityChanges: 1.0,\n  DifficultyCompletingTasks: 1.0,\n  Forgetfulness: 1.0\n};\n\nconst PatientForm = ({ features, onSubmit }) => {\n  // State initialization\n  const [formData, setFormData] = useState(healthyPatientProfile);\n  const [missingValues, setMissingValues] = useState([]);\n  \n  // Version stamp to verify which version is loaded\n  console.log(\"PatientForm Version: REBUILT WITH BUTTONS - \" + new Date().toISOString());\n\n  // Function to load a patient profile\n  const loadProfile = (profile) => {\n    setFormData(profile);\n    setMissingValues([]);\n  };\n\n  // Initialize all fields from API feature descriptions\n  useEffect(() => {\n    if (features && Object.keys(features).length > 0) {\n      const initialFormData = {...formData};\n      \n      // For each feature from the API, ensure we have a value in our form\n      Object.keys(features).forEach(feature => {\n        if (!(feature in initialFormData)) {\n          initialFormData[feature] = getDefaultValueForFeature(feature);\n        }\n      });\n      \n      setFormData(initialFormData);\n    }\n  }, [features]);\n\n  // Helper function to get a default value based on feature type\n  const getDefaultValueForFeature = (feature) => {\n    if (isBinaryField(feature)) return 0;\n    if (feature.includes(\"Cholesterol\")) return 150;\n    if (feature === \"SystolicBP\") return 120;\n    if (feature === \"DiastolicBP\") return 80;\n    if (feature === \"BMI\") return 25;\n    return 0;\n  };\n\n  if (!features || Object.keys(features).length === 0) {\n    return null;\n  }\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n    \n    // Remove from missing values if it was marked as missing\n    if (missingValues.includes(name)) {\n      setMissingValues(missingValues.filter(item => item !== name));\n    }\n  };\n\n  const toggleMissingValue = (name) => {\n    if (missingValues.includes(name)) {\n      setMissingValues(missingValues.filter(item => item !== name));\n    } else {\n      setMissingValues([...missingValues, name]);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    // Create a copy of the form data\n    const submissionData = { ...formData };\n    \n    // Set missing values to null\n    missingValues.forEach(field => {\n      submissionData[field] = null;\n    });\n    \n    onSubmit(submissionData);\n  };\n\n  // Helper function to determine if a field should be a select or text input\n  const isBinaryField = (fieldName) => {\n    return fieldName in valueMappings && Object.keys(valueMappings[fieldName]).length === 2;\n  };\n\n  const isCategoricalField = (fieldName) => {\n    return fieldName in valueMappings && Object.keys(valueMappings[fieldName]).length > 2;\n  };\n\n  const isScaleField = (fieldName) => {\n    const scaleFields = {\n      'AlcoholConsumption': 3,\n      'PhysicalActivity': 3,\n      'DietQuality': 5,\n      'SleepQuality': 5\n    };\n    return fieldName in scaleFields ? scaleFields[fieldName] : false;\n  };\n\n  // Create menu items for a scale\n  const createScaleMenuItems = (max) => {\n    const items = [];\n    for (let i = 0; i <= max; i++) {\n      items.push(<MenuItem key={i} value={i}>{i}</MenuItem>);\n    }\n    return items;\n  };\n\n  // Create menu items for categorical fields\n  const createCategoricalMenuItems = (fieldName) => {\n    if (!valueMappings[fieldName]) return null;\n    \n    return Object.entries(valueMappings[fieldName]).map(([value, label]) => (\n      <MenuItem key={value} value={parseInt(value, 10)}>{label}</MenuItem>\n    ));\n  };\n\n  const renderFeatureInputs = () => {\n    return Object.keys(features).map(feature => {\n      // Skip rendering if feature isn't in our form data or API features\n      if (!(feature in formData)) return null;\n      \n      if (isBinaryField(feature)) {\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                select\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                {createCategoricalMenuItems(feature)}\n              </TextField>\n              <Tooltip title={features[feature] || `${feature} value`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      } else if (isCategoricalField(feature)) {\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                select\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                {createCategoricalMenuItems(feature)}\n              </TextField>\n              <Tooltip title={features[feature] || `${feature} value`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      } else if (isScaleField(feature)) {\n        const maxScale = isScaleField(feature);\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                select\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                {createScaleMenuItems(maxScale)}\n              </TextField>\n              <Tooltip title={`${features[feature]} (Scale 0-${maxScale})`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      } else {\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                type=\"number\"\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                InputProps={{ \n                  inputProps: { \n                    step: feature === 'BMI' ? 0.1 : 1 \n                  } \n                }}\n                variant=\"outlined\"\n                margin=\"normal\"\n              />\n              <Tooltip title={features[feature] || `${feature} value`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      }\n    });\n  };\n\n  return (\n    <Card sx={{ mb: 3 }}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Patient Parameters\n        </Typography>\n        \n        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n          Enter the patient's information below. Missing values will be handled appropriately.\n        </Typography>\n\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"body2\" gutterBottom>\n            Load patient profile:\n          </Typography>\n          <ButtonGroup variant=\"contained\" aria-label=\"profile selection button group\">\n            <Button \n              onClick={() => loadProfile(healthyPatientProfile)}\n              color=\"success\"\n            >\n              Healthy Patient\n            </Button>\n            <Button \n              onClick={() => loadProfile(alzheimersPatientProfile)}\n              color=\"error\"\n            >\n              Alzheimer's Patient\n            </Button>\n          </ButtonGroup>\n        </Box>\n        \n        <form onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            {renderFeatureInputs()}\n            \n            <Grid item xs={12} sx={{ mt: 2 }}>\n              <Button \n                type=\"submit\" \n                variant=\"contained\" \n                color=\"primary\" \n                fullWidth\n                size=\"large\"\n              >\n                Make Prediction\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PatientForm;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OACEC,IAAI,CACJC,WAAW,CACXC,UAAU,CACVC,IAAI,CACJC,SAAS,CACTC,QAAQ,CACRC,MAAM,CACNC,gBAAgB,CAChBC,QAAQ,CACRC,GAAG,CACHC,OAAO,CACPC,UAAU,CACVC,WAAW,KACN,eAAe,CACtB,MAAO,CAAAC,eAAe,KAAM,iCAAiC,CAE7D;AACA,KAAM,CAAAC,aAAa,CAAG,CACpBC,MAAM,CAAE,CACN,CAAC,CAAE,MAAM,CACT,CAAC,CAAE,QACL,CAAC,CACDC,SAAS,CAAE,CACT,CAAC,CAAE,WAAW,CACd,CAAC,CAAE,kBAAkB,CACrB,CAAC,CAAE,OAAO,CACV,CAAC,CAAE,OACL,CAAC,CACDC,cAAc,CAAE,CACd,CAAC,CAAE,MAAM,CACT,CAAC,CAAE,aAAa,CAChB,CAAC,CAAE,aAAa,CAChB,CAAC,CAAE,QACL,CAAC,CACDC,OAAO,CAAE,CACP,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,uBAAuB,CAAE,CACvB,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,qBAAqB,CAAE,CACrB,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,QAAQ,CAAE,CACR,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,UAAU,CAAE,CACV,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,UAAU,CAAE,CACV,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,YAAY,CAAE,CACZ,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,gBAAgB,CAAE,CAChB,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,kBAAkB,CAAE,CAClB,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,SAAS,CAAE,CACT,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,cAAc,CAAE,CACd,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,kBAAkB,CAAE,CAClB,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,yBAAyB,CAAE,CACzB,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CAAC,CACDC,aAAa,CAAE,CACb,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,KACL,CACF,CAAC,CAED;AACA,KAAM,CAAAC,qBAAqB,CAAG,CAC5BC,GAAG,CAAE,IAAI,CACTlB,MAAM,CAAE,GAAG,CACXC,SAAS,CAAE,GAAG,CACdC,cAAc,CAAE,GAAG,CACnBiB,GAAG,CAAE,IAAI,CACThB,OAAO,CAAE,GAAG,CACZiB,kBAAkB,CAAE,GAAG,CACvBC,gBAAgB,CAAE,GAAG,CACrBC,WAAW,CAAE,GAAG,CAChBC,YAAY,CAAE,GAAG,CACjBnB,uBAAuB,CAAE,GAAG,CAC5BC,qBAAqB,CAAE,GAAG,CAC1BC,QAAQ,CAAE,GAAG,CACbC,UAAU,CAAE,GAAG,CACfC,UAAU,CAAE,GAAG,CACfC,YAAY,CAAE,GAAG,CACjBe,UAAU,CAAE,KAAK,CACjBC,WAAW,CAAE,IAAI,CACjBC,gBAAgB,CAAE,KAAK,CACvBC,cAAc,CAAE,IAAI,CACpBC,cAAc,CAAE,IAAI,CACpBC,wBAAwB,CAAE,IAAI,CAC9BC,IAAI,CAAE,IAAI,CACVC,oBAAoB,CAAE,IAAI,CAC1BrB,gBAAgB,CAAE,GAAG,CACrBC,kBAAkB,CAAE,GAAG,CACvBqB,GAAG,CAAE,IAAI,CACTpB,SAAS,CAAE,GAAG,CACdC,cAAc,CAAE,GAAG,CACnBC,kBAAkB,CAAE,GAAG,CACvBC,yBAAyB,CAAE,GAAG,CAC9BC,aAAa,CAAE,GACjB,CAAC,CAED;AACA,KAAM,CAAAiB,wBAAwB,CAAG,CAC/Bf,GAAG,CAAE,IAAI,CACTlB,MAAM,CAAE,GAAG,CACXC,SAAS,CAAE,GAAG,CACdC,cAAc,CAAE,GAAG,CACnBiB,GAAG,CAAE,IAAI,CACThB,OAAO,CAAE,GAAG,CACZiB,kBAAkB,CAAE,GAAG,CACvBC,gBAAgB,CAAE,GAAG,CACrBC,WAAW,CAAE,GAAG,CAChBC,YAAY,CAAE,GAAG,CACjBnB,uBAAuB,CAAE,GAAG,CAC5BC,qBAAqB,CAAE,GAAG,CAC1BC,QAAQ,CAAE,GAAG,CACbC,UAAU,CAAE,GAAG,CACfC,UAAU,CAAE,GAAG,CACfC,YAAY,CAAE,GAAG,CACjBe,UAAU,CAAE,KAAK,CACjBC,WAAW,CAAE,IAAI,CACjBC,gBAAgB,CAAE,KAAK,CACvBC,cAAc,CAAE,KAAK,CACrBC,cAAc,CAAE,IAAI,CACpBC,wBAAwB,CAAE,KAAK,CAC/BC,IAAI,CAAE,GAAG,CACTC,oBAAoB,CAAE,GAAG,CACzBrB,gBAAgB,CAAE,GAAG,CACrBC,kBAAkB,CAAE,GAAG,CACvBqB,GAAG,CAAE,GAAG,CACRpB,SAAS,CAAE,GAAG,CACdC,cAAc,CAAE,GAAG,CACnBC,kBAAkB,CAAE,GAAG,CACvBC,yBAAyB,CAAE,GAAG,CAC9BC,aAAa,CAAE,GACjB,CAAC,CAED,KAAM,CAAAkB,WAAW,CAAGC,IAAA,EAA4B,IAA3B,CAAEC,QAAQ,CAAEC,QAAS,CAAC,CAAAF,IAAA,CACzC;AACA,KAAM,CAACG,QAAQ,CAAEC,WAAW,CAAC,CAAGxD,QAAQ,CAACkC,qBAAqB,CAAC,CAC/D,KAAM,CAACuB,aAAa,CAAEC,gBAAgB,CAAC,CAAG1D,QAAQ,CAAC,EAAE,CAAC,CAEtD;AACA2D,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAEtF;AACA,KAAM,CAAAC,WAAW,CAAIC,OAAO,EAAK,CAC/BR,WAAW,CAACQ,OAAO,CAAC,CACpBN,gBAAgB,CAAC,EAAE,CAAC,CACtB,CAAC,CAED;AACAzD,SAAS,CAAC,IAAM,CACd,GAAIoD,QAAQ,EAAIY,MAAM,CAACC,IAAI,CAACb,QAAQ,CAAC,CAACc,MAAM,CAAG,CAAC,CAAE,CAChD,KAAM,CAAAC,eAAe,CAAG,CAAC,GAAGb,QAAQ,CAAC,CAErC;AACAU,MAAM,CAACC,IAAI,CAACb,QAAQ,CAAC,CAACgB,OAAO,CAACC,OAAO,EAAI,CACvC,GAAI,EAAEA,OAAO,GAAI,CAAAF,eAAe,CAAC,CAAE,CACjCA,eAAe,CAACE,OAAO,CAAC,CAAGC,yBAAyB,CAACD,OAAO,CAAC,CAC/D,CACF,CAAC,CAAC,CAEFd,WAAW,CAACY,eAAe,CAAC,CAC9B,CACF,CAAC,CAAE,CAACf,QAAQ,CAAC,CAAC,CAEd;AACA,KAAM,CAAAkB,yBAAyB,CAAID,OAAO,EAAK,CAC7C,GAAIE,aAAa,CAACF,OAAO,CAAC,CAAE,MAAO,EAAC,CACpC,GAAIA,OAAO,CAACG,QAAQ,CAAC,aAAa,CAAC,CAAE,MAAO,IAAG,CAC/C,GAAIH,OAAO,GAAK,YAAY,CAAE,MAAO,IAAG,CACxC,GAAIA,OAAO,GAAK,aAAa,CAAE,MAAO,GAAE,CACxC,GAAIA,OAAO,GAAK,KAAK,CAAE,MAAO,GAAE,CAChC,MAAO,EAAC,CACV,CAAC,CAED,GAAI,CAACjB,QAAQ,EAAIY,MAAM,CAACC,IAAI,CAACb,QAAQ,CAAC,CAACc,MAAM,GAAK,CAAC,CAAE,CACnD,MAAO,KAAI,CACb,CAEA,KAAM,CAAAO,iBAAiB,CAAIC,CAAC,EAAK,CAC/B,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAGF,CAAC,CAACG,MAAM,CAChCtB,WAAW,CAACuB,SAAS,GAAK,CACxB,GAAGA,SAAS,CACZ,CAACH,IAAI,EAAGC,KACV,CAAC,CAAC,CAAC,CAEH;AACA,GAAIpB,aAAa,CAACgB,QAAQ,CAACG,IAAI,CAAC,CAAE,CAChClB,gBAAgB,CAACD,aAAa,CAACuB,MAAM,CAACC,IAAI,EAAIA,IAAI,GAAKL,IAAI,CAAC,CAAC,CAC/D,CACF,CAAC,CAED,KAAM,CAAAM,kBAAkB,CAAIN,IAAI,EAAK,CACnC,GAAInB,aAAa,CAACgB,QAAQ,CAACG,IAAI,CAAC,CAAE,CAChClB,gBAAgB,CAACD,aAAa,CAACuB,MAAM,CAACC,IAAI,EAAIA,IAAI,GAAKL,IAAI,CAAC,CAAC,CAC/D,CAAC,IAAM,CACLlB,gBAAgB,CAAC,CAAC,GAAGD,aAAa,CAAEmB,IAAI,CAAC,CAAC,CAC5C,CACF,CAAC,CAED,KAAM,CAAAO,YAAY,CAAIR,CAAC,EAAK,CAC1BA,CAAC,CAACS,cAAc,CAAC,CAAC,CAElB;AACA,KAAM,CAAAC,cAAc,CAAG,CAAE,GAAG9B,QAAS,CAAC,CAEtC;AACAE,aAAa,CAACY,OAAO,CAACiB,KAAK,EAAI,CAC7BD,cAAc,CAACC,KAAK,CAAC,CAAG,IAAI,CAC9B,CAAC,CAAC,CAEFhC,QAAQ,CAAC+B,cAAc,CAAC,CAC1B,CAAC,CAED;AACA,KAAM,CAAAb,aAAa,CAAIe,SAAS,EAAK,CACnC,MAAO,CAAAA,SAAS,GAAI,CAAAvE,aAAa,EAAIiD,MAAM,CAACC,IAAI,CAAClD,aAAa,CAACuE,SAAS,CAAC,CAAC,CAACpB,MAAM,GAAK,CAAC,CACzF,CAAC,CAED,KAAM,CAAAqB,kBAAkB,CAAID,SAAS,EAAK,CACxC,MAAO,CAAAA,SAAS,GAAI,CAAAvE,aAAa,EAAIiD,MAAM,CAACC,IAAI,CAAClD,aAAa,CAACuE,SAAS,CAAC,CAAC,CAACpB,MAAM,CAAG,CAAC,CACvF,CAAC,CAED,KAAM,CAAAsB,YAAY,CAAIF,SAAS,EAAK,CAClC,KAAM,CAAAG,WAAW,CAAG,CAClB,oBAAoB,CAAE,CAAC,CACvB,kBAAkB,CAAE,CAAC,CACrB,aAAa,CAAE,CAAC,CAChB,cAAc,CAAE,CAClB,CAAC,CACD,MAAO,CAAAH,SAAS,GAAI,CAAAG,WAAW,CAAGA,WAAW,CAACH,SAAS,CAAC,CAAG,KAAK,CAClE,CAAC,CAED;AACA,KAAM,CAAAI,oBAAoB,CAAIC,GAAG,EAAK,CACpC,KAAM,CAAAC,KAAK,CAAG,EAAE,CAChB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIF,GAAG,CAAEE,CAAC,EAAE,CAAE,CAC7BD,KAAK,CAACE,IAAI,cAAChG,KAAA,CAAAiG,aAAA,CAACzF,QAAQ,EAAC0F,GAAG,CAAEH,CAAE,CAACjB,KAAK,CAAEiB,CAAE,EAAEA,CAAY,CAAC,CAAC,CACxD,CACA,MAAO,CAAAD,KAAK,CACd,CAAC,CAED;AACA,KAAM,CAAAK,0BAA0B,CAAIX,SAAS,EAAK,CAChD,GAAI,CAACvE,aAAa,CAACuE,SAAS,CAAC,CAAE,MAAO,KAAI,CAE1C,MAAO,CAAAtB,MAAM,CAACkC,OAAO,CAACnF,aAAa,CAACuE,SAAS,CAAC,CAAC,CAACa,GAAG,CAACC,KAAA,MAAC,CAACxB,KAAK,CAAEyB,KAAK,CAAC,CAAAD,KAAA,oBACjEtG,KAAA,CAAAiG,aAAA,CAACzF,QAAQ,EAAC0F,GAAG,CAAEpB,KAAM,CAACA,KAAK,CAAE0B,QAAQ,CAAC1B,KAAK,CAAE,EAAE,CAAE,EAAEyB,KAAgB,CAAC,EACrE,CAAC,CACJ,CAAC,CAED,KAAM,CAAAE,mBAAmB,CAAGA,CAAA,GAAM,CAChC,MAAO,CAAAvC,MAAM,CAACC,IAAI,CAACb,QAAQ,CAAC,CAAC+C,GAAG,CAAC9B,OAAO,EAAI,CAC1C;AACA,GAAI,EAAEA,OAAO,GAAI,CAAAf,QAAQ,CAAC,CAAE,MAAO,KAAI,CAEvC,GAAIiB,aAAa,CAACF,OAAO,CAAC,CAAE,CAC1B,mBACEvE,KAAA,CAAAiG,aAAA,CAAC3F,IAAI,EAAC4E,IAAI,MAACwB,EAAE,CAAE,EAAG,CAACC,EAAE,CAAE,CAAE,CAACC,EAAE,CAAE,CAAE,CAACV,GAAG,CAAE3B,OAAQ,eAC5CvE,KAAA,CAAAiG,aAAA,CAACrF,GAAG,EAACiG,EAAE,CAAE,CAAEC,OAAO,CAAE,MAAM,CAAEC,UAAU,CAAE,YAAa,CAAE,eACrD/G,KAAA,CAAAiG,aAAA,CAAC1F,SAAS,EACRsE,IAAI,CAAEN,OAAQ,CACdgC,KAAK,CAAEhC,OAAQ,CACfyC,SAAS,MACTC,MAAM,MACNnC,KAAK,CAAEpB,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAC,CAAG,EAAE,CAAGf,QAAQ,CAACe,OAAO,CAAE,CAChE2C,QAAQ,CAAEvC,iBAAkB,CAC5BwC,QAAQ,CAAEzD,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAE,CAC1C6C,OAAO,CAAC,UAAU,CAClBC,MAAM,CAAC,QAAQ,EAEdlB,0BAA0B,CAAC5B,OAAO,CAC1B,CAAC,cACZvE,KAAA,CAAAiG,aAAA,CAACpF,OAAO,EAACyG,KAAK,CAAEhE,QAAQ,CAACiB,OAAO,CAAC,EAAI,GAAGA,OAAO,QAAS,eACtDvE,KAAA,CAAAiG,aAAA,CAACnF,UAAU,EAACyG,IAAI,CAAC,OAAO,CAACV,EAAE,CAAE,CAAEW,EAAE,CAAE,GAAG,CAAEC,EAAE,CAAE,CAAE,CAAE,eAC9CzH,KAAA,CAAAiG,aAAA,CAACjF,eAAe,EAAC0G,QAAQ,CAAC,OAAO,CAAE,CACzB,CACL,CACN,CAAC,cACN1H,KAAA,CAAAiG,aAAA,CAACvF,gBAAgB,EACfiH,OAAO,cACL3H,KAAA,CAAAiG,aAAA,CAACtF,QAAQ,EACPiH,OAAO,CAAElE,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAE,CACzC2C,QAAQ,CAAEA,CAAA,GAAM/B,kBAAkB,CAACZ,OAAO,CAAE,CAC7C,CACF,CACDgC,KAAK,CAAC,eAAe,CACtB,CACG,CAAC,CAEX,CAAC,IAAM,IAAId,kBAAkB,CAAClB,OAAO,CAAC,CAAE,CACtC,mBACEvE,KAAA,CAAAiG,aAAA,CAAC3F,IAAI,EAAC4E,IAAI,MAACwB,EAAE,CAAE,EAAG,CAACC,EAAE,CAAE,CAAE,CAACC,EAAE,CAAE,CAAE,CAACV,GAAG,CAAE3B,OAAQ,eAC5CvE,KAAA,CAAAiG,aAAA,CAACrF,GAAG,EAACiG,EAAE,CAAE,CAAEC,OAAO,CAAE,MAAM,CAAEC,UAAU,CAAE,YAAa,CAAE,eACrD/G,KAAA,CAAAiG,aAAA,CAAC1F,SAAS,EACRsE,IAAI,CAAEN,OAAQ,CACdgC,KAAK,CAAEhC,OAAQ,CACfyC,SAAS,MACTC,MAAM,MACNnC,KAAK,CAAEpB,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAC,CAAG,EAAE,CAAGf,QAAQ,CAACe,OAAO,CAAE,CAChE2C,QAAQ,CAAEvC,iBAAkB,CAC5BwC,QAAQ,CAAEzD,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAE,CAC1C6C,OAAO,CAAC,UAAU,CAClBC,MAAM,CAAC,QAAQ,EAEdlB,0BAA0B,CAAC5B,OAAO,CAC1B,CAAC,cACZvE,KAAA,CAAAiG,aAAA,CAACpF,OAAO,EAACyG,KAAK,CAAEhE,QAAQ,CAACiB,OAAO,CAAC,EAAI,GAAGA,OAAO,QAAS,eACtDvE,KAAA,CAAAiG,aAAA,CAACnF,UAAU,EAACyG,IAAI,CAAC,OAAO,CAACV,EAAE,CAAE,CAAEW,EAAE,CAAE,GAAG,CAAEC,EAAE,CAAE,CAAE,CAAE,eAC9CzH,KAAA,CAAAiG,aAAA,CAACjF,eAAe,EAAC0G,QAAQ,CAAC,OAAO,CAAE,CACzB,CACL,CACN,CAAC,cACN1H,KAAA,CAAAiG,aAAA,CAACvF,gBAAgB,EACfiH,OAAO,cACL3H,KAAA,CAAAiG,aAAA,CAACtF,QAAQ,EACPiH,OAAO,CAAElE,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAE,CACzC2C,QAAQ,CAAEA,CAAA,GAAM/B,kBAAkB,CAACZ,OAAO,CAAE,CAC7C,CACF,CACDgC,KAAK,CAAC,eAAe,CACtB,CACG,CAAC,CAEX,CAAC,IAAM,IAAIb,YAAY,CAACnB,OAAO,CAAC,CAAE,CAChC,KAAM,CAAAsD,QAAQ,CAAGnC,YAAY,CAACnB,OAAO,CAAC,CACtC,mBACEvE,KAAA,CAAAiG,aAAA,CAAC3F,IAAI,EAAC4E,IAAI,MAACwB,EAAE,CAAE,EAAG,CAACC,EAAE,CAAE,CAAE,CAACC,EAAE,CAAE,CAAE,CAACV,GAAG,CAAE3B,OAAQ,eAC5CvE,KAAA,CAAAiG,aAAA,CAACrF,GAAG,EAACiG,EAAE,CAAE,CAAEC,OAAO,CAAE,MAAM,CAAEC,UAAU,CAAE,YAAa,CAAE,eACrD/G,KAAA,CAAAiG,aAAA,CAAC1F,SAAS,EACRsE,IAAI,CAAEN,OAAQ,CACdgC,KAAK,CAAEhC,OAAQ,CACfyC,SAAS,MACTC,MAAM,MACNnC,KAAK,CAAEpB,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAC,CAAG,EAAE,CAAGf,QAAQ,CAACe,OAAO,CAAE,CAChE2C,QAAQ,CAAEvC,iBAAkB,CAC5BwC,QAAQ,CAAEzD,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAE,CAC1C6C,OAAO,CAAC,UAAU,CAClBC,MAAM,CAAC,QAAQ,EAEdzB,oBAAoB,CAACiC,QAAQ,CACrB,CAAC,cACZ7H,KAAA,CAAAiG,aAAA,CAACpF,OAAO,EAACyG,KAAK,CAAE,GAAGhE,QAAQ,CAACiB,OAAO,CAAC,aAAasD,QAAQ,GAAI,eAC3D7H,KAAA,CAAAiG,aAAA,CAACnF,UAAU,EAACyG,IAAI,CAAC,OAAO,CAACV,EAAE,CAAE,CAAEW,EAAE,CAAE,GAAG,CAAEC,EAAE,CAAE,CAAE,CAAE,eAC9CzH,KAAA,CAAAiG,aAAA,CAACjF,eAAe,EAAC0G,QAAQ,CAAC,OAAO,CAAE,CACzB,CACL,CACN,CAAC,cACN1H,KAAA,CAAAiG,aAAA,CAACvF,gBAAgB,EACfiH,OAAO,cACL3H,KAAA,CAAAiG,aAAA,CAACtF,QAAQ,EACPiH,OAAO,CAAElE,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAE,CACzC2C,QAAQ,CAAEA,CAAA,GAAM/B,kBAAkB,CAACZ,OAAO,CAAE,CAC7C,CACF,CACDgC,KAAK,CAAC,eAAe,CACtB,CACG,CAAC,CAEX,CAAC,IAAM,CACL,mBACEvG,KAAA,CAAAiG,aAAA,CAAC3F,IAAI,EAAC4E,IAAI,MAACwB,EAAE,CAAE,EAAG,CAACC,EAAE,CAAE,CAAE,CAACC,EAAE,CAAE,CAAE,CAACV,GAAG,CAAE3B,OAAQ,eAC5CvE,KAAA,CAAAiG,aAAA,CAACrF,GAAG,EAACiG,EAAE,CAAE,CAAEC,OAAO,CAAE,MAAM,CAAEC,UAAU,CAAE,YAAa,CAAE,eACrD/G,KAAA,CAAAiG,aAAA,CAAC1F,SAAS,EACRsE,IAAI,CAAEN,OAAQ,CACdgC,KAAK,CAAEhC,OAAQ,CACfyC,SAAS,MACTc,IAAI,CAAC,QAAQ,CACbhD,KAAK,CAAEpB,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAC,CAAG,EAAE,CAAGf,QAAQ,CAACe,OAAO,CAAE,CAChE2C,QAAQ,CAAEvC,iBAAkB,CAC5BwC,QAAQ,CAAEzD,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAE,CAC1CwD,UAAU,CAAE,CACVC,UAAU,CAAE,CACVC,IAAI,CAAE1D,OAAO,GAAK,KAAK,CAAG,GAAG,CAAG,CAClC,CACF,CAAE,CACF6C,OAAO,CAAC,UAAU,CAClBC,MAAM,CAAC,QAAQ,CAChB,CAAC,cACFrH,KAAA,CAAAiG,aAAA,CAACpF,OAAO,EAACyG,KAAK,CAAEhE,QAAQ,CAACiB,OAAO,CAAC,EAAI,GAAGA,OAAO,QAAS,eACtDvE,KAAA,CAAAiG,aAAA,CAACnF,UAAU,EAACyG,IAAI,CAAC,OAAO,CAACV,EAAE,CAAE,CAAEW,EAAE,CAAE,GAAG,CAAEC,EAAE,CAAE,CAAE,CAAE,eAC9CzH,KAAA,CAAAiG,aAAA,CAACjF,eAAe,EAAC0G,QAAQ,CAAC,OAAO,CAAE,CACzB,CACL,CACN,CAAC,cACN1H,KAAA,CAAAiG,aAAA,CAACvF,gBAAgB,EACfiH,OAAO,cACL3H,KAAA,CAAAiG,aAAA,CAACtF,QAAQ,EACPiH,OAAO,CAAElE,aAAa,CAACgB,QAAQ,CAACH,OAAO,CAAE,CACzC2C,QAAQ,CAAEA,CAAA,GAAM/B,kBAAkB,CAACZ,OAAO,CAAE,CAC7C,CACF,CACDgC,KAAK,CAAC,eAAe,CACtB,CACG,CAAC,CAEX,CACF,CAAC,CAAC,CACJ,CAAC,CAED,mBACEvG,KAAA,CAAAiG,aAAA,CAAC9F,IAAI,EAAC0G,EAAE,CAAE,CAAEqB,EAAE,CAAE,CAAE,CAAE,eAClBlI,KAAA,CAAAiG,aAAA,CAAC7F,WAAW,mBACVJ,KAAA,CAAAiG,aAAA,CAAC5F,UAAU,EAAC+G,OAAO,CAAC,IAAI,CAACe,YAAY,OAAC,oBAE1B,CAAC,cAEbnI,KAAA,CAAAiG,aAAA,CAAC5F,UAAU,EAAC+G,OAAO,CAAC,OAAO,CAACgB,KAAK,CAAC,gBAAgB,CAACC,SAAS,OAAC,sFAEjD,CAAC,cAEbrI,KAAA,CAAAiG,aAAA,CAACrF,GAAG,EAACiG,EAAE,CAAE,CAAEqB,EAAE,CAAE,CAAE,CAAE,eACjBlI,KAAA,CAAAiG,aAAA,CAAC5F,UAAU,EAAC+G,OAAO,CAAC,OAAO,CAACe,YAAY,OAAC,uBAE7B,CAAC,cACbnI,KAAA,CAAAiG,aAAA,CAAClF,WAAW,EAACqG,OAAO,CAAC,WAAW,CAAC,aAAW,gCAAgC,eAC1EpH,KAAA,CAAAiG,aAAA,CAACxF,MAAM,EACL6H,OAAO,CAAEA,CAAA,GAAMtE,WAAW,CAAC7B,qBAAqB,CAAE,CAClDiG,KAAK,CAAC,SAAS,EAChB,iBAEO,CAAC,cACTpI,KAAA,CAAAiG,aAAA,CAACxF,MAAM,EACL6H,OAAO,CAAEA,CAAA,GAAMtE,WAAW,CAACb,wBAAwB,CAAE,CACrDiF,KAAK,CAAC,OAAO,EACd,qBAEO,CACG,CACV,CAAC,cAENpI,KAAA,CAAAiG,aAAA,SAAM1C,QAAQ,CAAE6B,YAAa,eAC3BpF,KAAA,CAAAiG,aAAA,CAAC3F,IAAI,EAACiI,SAAS,MAACC,OAAO,CAAE,CAAE,EACxB/B,mBAAmB,CAAC,CAAC,cAEtBzG,KAAA,CAAAiG,aAAA,CAAC3F,IAAI,EAAC4E,IAAI,MAACwB,EAAE,CAAE,EAAG,CAACG,EAAE,CAAE,CAAEW,EAAE,CAAE,CAAE,CAAE,eAC/BxH,KAAA,CAAAiG,aAAA,CAACxF,MAAM,EACLqH,IAAI,CAAC,QAAQ,CACbV,OAAO,CAAC,WAAW,CACnBgB,KAAK,CAAC,SAAS,CACfpB,SAAS,MACTO,IAAI,CAAC,OAAO,EACb,iBAEO,CACJ,CACF,CACF,CACK,CACT,CAAC,CAEX,CAAC,CAED,cAAe,CAAAnE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}