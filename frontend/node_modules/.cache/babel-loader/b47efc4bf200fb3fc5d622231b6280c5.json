{"ast":null,"code":"var _jsxFileName = \"/Users/roaattaallah/Desktop/MLFlow_Project/frontend_2/src/components/PatientForm_new.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, TextField, MenuItem, Button, FormControlLabel, Checkbox, Box, Tooltip, IconButton, ButtonGroup } from '@mui/material';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\n\n// Dictionary for mapping numeric codes to human-readable values\nconst valueMappings = {\n  Gender: {\n    0: 'Male',\n    1: 'Female'\n  },\n  Ethnicity: {\n    0: 'Caucasian',\n    1: 'African American',\n    2: 'Asian',\n    3: 'Other'\n  },\n  EducationLevel: {\n    0: 'None',\n    1: 'High School',\n    2: 'Bachelor\\'s',\n    3: 'Higher'\n  },\n  Smoking: {\n    0: 'No',\n    1: 'Yes'\n  },\n  FamilyHistoryAlzheimers: {\n    0: 'No',\n    1: 'Yes'\n  },\n  CardiovascularDisease: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Diabetes: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Depression: {\n    0: 'No',\n    1: 'Yes'\n  },\n  HeadInjury: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Hypertension: {\n    0: 'No',\n    1: 'Yes'\n  },\n  MemoryComplaints: {\n    0: 'No',\n    1: 'Yes'\n  },\n  BehavioralProblems: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Confusion: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Disorientation: {\n    0: 'No',\n    1: 'Yes'\n  },\n  PersonalityChanges: {\n    0: 'No',\n    1: 'Yes'\n  },\n  DifficultyCompletingTasks: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Forgetfulness: {\n    0: 'No',\n    1: 'Yes'\n  }\n};\n\n// Initial values for healthy patient\nconst healthyPatientProfile = {\n  Age: 45.0,\n  Gender: 0.0,\n  Ethnicity: 0.0,\n  EducationLevel: 3.0,\n  BMI: 22.0,\n  Smoking: 0.0,\n  AlcoholConsumption: 0.0,\n  PhysicalActivity: 2.0,\n  DietQuality: 5.0,\n  SleepQuality: 5.0,\n  FamilyHistoryAlzheimers: 0.0,\n  CardiovascularDisease: 0.0,\n  Diabetes: 0.0,\n  Depression: 0.0,\n  HeadInjury: 0.0,\n  Hypertension: 0.0,\n  SystolicBP: 110.0,\n  DiastolicBP: 70.0,\n  CholesterolTotal: 170.0,\n  CholesterolLDL: 90.0,\n  CholesterolHDL: 65.0,\n  CholesterolTriglycerides: 100.0,\n  MMSE: 30.0,\n  FunctionalAssessment: 10.0,\n  MemoryComplaints: 0.0,\n  BehavioralProblems: 0.0,\n  ADL: 10.0,\n  Confusion: 0.0,\n  Disorientation: 0.0,\n  PersonalityChanges: 0.0,\n  DifficultyCompletingTasks: 0.0,\n  Forgetfulness: 0.0\n};\n\n// Initial values for Alzheimer's patient\nconst alzheimersPatientProfile = {\n  Age: 78.0,\n  Gender: 0.0,\n  Ethnicity: 0.0,\n  EducationLevel: 1.0,\n  BMI: 26.5,\n  Smoking: 1.0,\n  AlcoholConsumption: 1.0,\n  PhysicalActivity: 0.0,\n  DietQuality: 2.0,\n  SleepQuality: 2.0,\n  FamilyHistoryAlzheimers: 1.0,\n  CardiovascularDisease: 1.0,\n  Diabetes: 1.0,\n  Depression: 1.0,\n  HeadInjury: 0.0,\n  Hypertension: 1.0,\n  SystolicBP: 148.0,\n  DiastolicBP: 90.0,\n  CholesterolTotal: 230.0,\n  CholesterolLDL: 155.0,\n  CholesterolHDL: 35.0,\n  CholesterolTriglycerides: 200.0,\n  MMSE: 19.0,\n  FunctionalAssessment: 4.0,\n  MemoryComplaints: 1.0,\n  BehavioralProblems: 1.0,\n  ADL: 5.0,\n  Confusion: 1.0,\n  Disorientation: 1.0,\n  PersonalityChanges: 1.0,\n  DifficultyCompletingTasks: 1.0,\n  Forgetfulness: 1.0\n};\n\n// Empty profile for initially clearing inputs\nconst emptyPatientProfile = {\n  Age: '',\n  Gender: '',\n  Ethnicity: '',\n  EducationLevel: '',\n  BMI: '',\n  Smoking: '',\n  AlcoholConsumption: '',\n  PhysicalActivity: '',\n  DietQuality: '',\n  SleepQuality: '',\n  FamilyHistoryAlzheimers: '',\n  CardiovascularDisease: '',\n  Diabetes: '',\n  Depression: '',\n  HeadInjury: '',\n  Hypertension: '',\n  SystolicBP: '',\n  DiastolicBP: '',\n  CholesterolTotal: '',\n  CholesterolLDL: '',\n  CholesterolHDL: '',\n  CholesterolTriglycerides: '',\n  MMSE: '',\n  FunctionalAssessment: '',\n  MemoryComplaints: '',\n  BehavioralProblems: '',\n  ADL: '',\n  Confusion: '',\n  Disorientation: '',\n  PersonalityChanges: '',\n  DifficultyCompletingTasks: '',\n  Forgetfulness: ''\n};\nconst PatientForm = ({\n  features,\n  onSubmit\n}) => {\n  // State initialization - start with empty form\n  const [formData, setFormData] = useState(emptyPatientProfile);\n  const [missingValues, setMissingValues] = useState([]);\n\n  // Version stamp to verify which version is loaded\n  console.log(\"PatientForm Version: REBUILT WITH BUTTONS - \" + new Date().toISOString());\n\n  // Function to load a patient profile\n  const loadProfile = profile => {\n    setFormData(profile);\n    setMissingValues([]);\n  };\n\n  // Function to clear all inputs\n  const clearInputs = () => {\n    setFormData(emptyPatientProfile);\n    setMissingValues([]);\n  };\n\n  // Initialize all fields from API feature descriptions\n  useEffect(() => {\n    if (features && Object.keys(features).length > 0) {\n      const initialFormData = {\n        ...formData\n      };\n\n      // For each feature from the API, ensure we have a value in our form\n      Object.keys(features).forEach(feature => {\n        if (!(feature in initialFormData)) {\n          initialFormData[feature] = getDefaultValueForFeature(feature);\n        }\n      });\n      setFormData(initialFormData);\n    }\n  }, [features]);\n\n  // Helper function to get a default value based on feature type\n  const getDefaultValueForFeature = feature => {\n    if (isBinaryField(feature)) return 0;\n    if (feature.includes(\"Cholesterol\")) return 150;\n    if (feature === \"SystolicBP\") return 120;\n    if (feature === \"DiastolicBP\") return 80;\n    if (feature === \"BMI\") return 25;\n    return 0;\n  };\n  if (!features || Object.keys(features).length === 0) {\n    return null;\n  }\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n\n    // Remove from missing values if it was marked as missing\n    if (missingValues.includes(name)) {\n      setMissingValues(missingValues.filter(item => item !== name));\n    }\n  };\n  const toggleMissingValue = name => {\n    if (missingValues.includes(name)) {\n      setMissingValues(missingValues.filter(item => item !== name));\n    } else {\n      setMissingValues([...missingValues, name]);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Create a copy of the form data\n    const submissionData = {\n      ...formData\n    };\n\n    // Ensure all values are properly converted to numbers\n    Object.keys(submissionData).forEach(key => {\n      if (missingValues.includes(key)) {\n        submissionData[key] = null;\n      } else {\n        // Ensure all values are properly converted to numbers\n        // Use parseFloat for values that might have decimals\n        if (typeof submissionData[key] === 'string') {\n          const numValue = parseFloat(submissionData[key]);\n          if (!isNaN(numValue)) {\n            submissionData[key] = numValue;\n          }\n        } else if (submissionData[key] === '') {\n          // Handle empty string inputs\n          submissionData[key] = null;\n        } else if (typeof submissionData[key] !== 'number') {\n          // Try to convert any non-number and non-null values to numbers\n          try {\n            const numValue = parseFloat(submissionData[key]);\n            if (!isNaN(numValue)) {\n              submissionData[key] = numValue;\n            }\n          } catch (error) {\n            console.warn(`Failed to convert ${key} value to number:`, submissionData[key]);\n          }\n        }\n      }\n    });\n    console.log('Sending patient data to API:', submissionData);\n    onSubmit(submissionData);\n  };\n\n  // Helper function to determine if a field should be a select or text input\n  const isBinaryField = fieldName => {\n    return fieldName in valueMappings && Object.keys(valueMappings[fieldName]).length === 2;\n  };\n  const isCategoricalField = fieldName => {\n    return fieldName in valueMappings && Object.keys(valueMappings[fieldName]).length > 2;\n  };\n  const isScaleField = fieldName => {\n    const scaleFields = {\n      'AlcoholConsumption': 3,\n      'PhysicalActivity': 3,\n      'DietQuality': 5,\n      'SleepQuality': 5\n    };\n    return fieldName in scaleFields ? scaleFields[fieldName] : false;\n  };\n\n  // Create menu items for a scale\n  const createScaleMenuItems = max => {\n    const items = [];\n    for (let i = 0; i <= max; i++) {\n      items.push(/*#__PURE__*/React.createElement(MenuItem, {\n        key: i,\n        value: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 18\n        }\n      }, i));\n    }\n    return items;\n  };\n\n  // Create menu items for categorical fields\n  const createCategoricalMenuItems = fieldName => {\n    if (!valueMappings[fieldName]) return null;\n    return Object.entries(valueMappings[fieldName]).map(([value, label]) => /*#__PURE__*/React.createElement(MenuItem, {\n      key: value,\n      value: parseInt(value, 10),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 7\n      }\n    }, label));\n  };\n  const renderFeatureInputs = () => {\n    return Object.keys(features).map(feature => {\n      // Skip rendering if feature isn't in our form data or API features\n      if (!(feature in formData)) return null;\n      if (isBinaryField(feature)) {\n        return /*#__PURE__*/React.createElement(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          key: feature,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'flex-start'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(TextField, {\n          name: feature,\n          label: feature,\n          fullWidth: true,\n          select: true,\n          value: missingValues.includes(feature) ? '' : formData[feature],\n          onChange: handleInputChange,\n          disabled: missingValues.includes(feature),\n          variant: \"outlined\",\n          margin: \"normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }\n        }, createCategoricalMenuItems(feature)), /*#__PURE__*/React.createElement(Tooltip, {\n          title: features[feature] || `${feature} value`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          size: \"small\",\n          sx: {\n            mt: 2.5,\n            ml: 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(HelpOutlineIcon, {\n          fontSize: \"small\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 19\n          }\n        })))), /*#__PURE__*/React.createElement(FormControlLabel, {\n          control: /*#__PURE__*/React.createElement(Checkbox, {\n            checked: missingValues.includes(feature),\n            onChange: () => toggleMissingValue(feature),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }\n          }),\n          label: \"Missing value\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }\n        }));\n      } else if (isCategoricalField(feature)) {\n        return /*#__PURE__*/React.createElement(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          key: feature,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'flex-start'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(TextField, {\n          name: feature,\n          label: feature,\n          fullWidth: true,\n          select: true,\n          value: missingValues.includes(feature) ? '' : formData[feature],\n          onChange: handleInputChange,\n          disabled: missingValues.includes(feature),\n          variant: \"outlined\",\n          margin: \"normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 15\n          }\n        }, createCategoricalMenuItems(feature)), /*#__PURE__*/React.createElement(Tooltip, {\n          title: features[feature] || `${feature} value`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          size: \"small\",\n          sx: {\n            mt: 2.5,\n            ml: 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(HelpOutlineIcon, {\n          fontSize: \"small\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 19\n          }\n        })))), /*#__PURE__*/React.createElement(FormControlLabel, {\n          control: /*#__PURE__*/React.createElement(Checkbox, {\n            checked: missingValues.includes(feature),\n            onChange: () => toggleMissingValue(feature),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }\n          }),\n          label: \"Missing value\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }\n        }));\n      } else if (isScaleField(feature)) {\n        const maxScale = isScaleField(feature);\n        return /*#__PURE__*/React.createElement(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          key: feature,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'flex-start'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(TextField, {\n          name: feature,\n          label: feature,\n          fullWidth: true,\n          select: true,\n          value: missingValues.includes(feature) ? '' : formData[feature],\n          onChange: handleInputChange,\n          disabled: missingValues.includes(feature),\n          variant: \"outlined\",\n          margin: \"normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }\n        }, createScaleMenuItems(maxScale)), /*#__PURE__*/React.createElement(Tooltip, {\n          title: `${features[feature]} (Scale 0-${maxScale})`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          size: \"small\",\n          sx: {\n            mt: 2.5,\n            ml: 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(HelpOutlineIcon, {\n          fontSize: \"small\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 19\n          }\n        })))), /*#__PURE__*/React.createElement(FormControlLabel, {\n          control: /*#__PURE__*/React.createElement(Checkbox, {\n            checked: missingValues.includes(feature),\n            onChange: () => toggleMissingValue(feature),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 17\n            }\n          }),\n          label: \"Missing value\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          key: feature,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'flex-start'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(TextField, {\n          name: feature,\n          label: feature,\n          fullWidth: true,\n          type: \"number\",\n          value: missingValues.includes(feature) ? '' : formData[feature],\n          onChange: handleInputChange,\n          disabled: missingValues.includes(feature),\n          InputProps: {\n            inputProps: {\n              step: feature === 'BMI' ? 0.1 : 1\n            }\n          },\n          variant: \"outlined\",\n          margin: \"normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(Tooltip, {\n          title: features[feature] || `${feature} value`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          size: \"small\",\n          sx: {\n            mt: 2.5,\n            ml: 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(HelpOutlineIcon, {\n          fontSize: \"small\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 19\n          }\n        })))), /*#__PURE__*/React.createElement(FormControlLabel, {\n          control: /*#__PURE__*/React.createElement(Checkbox, {\n            checked: missingValues.includes(feature),\n            onChange: () => toggleMissingValue(feature),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 17\n            }\n          }),\n          label: \"Missing value\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }\n        }));\n      }\n    });\n  };\n  return /*#__PURE__*/React.createElement(Card, {\n    sx: {\n      mb: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 9\n    }\n  }, \"Patient Parameters\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"text.secondary\",\n    paragraph: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 9\n    }\n  }, \"Enter the patient's information below. Missing values will be handled appropriately.\"), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      mb: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 11\n    }\n  }, \"Load patient profile:\"), /*#__PURE__*/React.createElement(ButtonGroup, {\n    variant: \"contained\",\n    \"aria-label\": \"profile selection button group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => loadProfile(healthyPatientProfile),\n    color: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 13\n    }\n  }, \"Healthy Patient\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => loadProfile(alzheimersPatientProfile),\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 13\n    }\n  }, \"Alzheimer's Patient\"))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 11\n    }\n  }, renderFeatureInputs(), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sx: {\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    fullWidth: true,\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 15\n    }\n  }, \"Make Prediction\"))))));\n};\nexport default PatientForm;","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","Typography","Grid","TextField","MenuItem","Button","FormControlLabel","Checkbox","Box","Tooltip","IconButton","ButtonGroup","HelpOutlineIcon","valueMappings","Gender","Ethnicity","EducationLevel","Smoking","FamilyHistoryAlzheimers","CardiovascularDisease","Diabetes","Depression","HeadInjury","Hypertension","MemoryComplaints","BehavioralProblems","Confusion","Disorientation","PersonalityChanges","DifficultyCompletingTasks","Forgetfulness","healthyPatientProfile","Age","BMI","AlcoholConsumption","PhysicalActivity","DietQuality","SleepQuality","SystolicBP","DiastolicBP","CholesterolTotal","CholesterolLDL","CholesterolHDL","CholesterolTriglycerides","MMSE","FunctionalAssessment","ADL","alzheimersPatientProfile","emptyPatientProfile","PatientForm","features","onSubmit","formData","setFormData","missingValues","setMissingValues","console","log","Date","toISOString","loadProfile","profile","clearInputs","Object","keys","length","initialFormData","forEach","feature","getDefaultValueForFeature","isBinaryField","includes","handleInputChange","e","name","value","target","prevState","filter","item","toggleMissingValue","handleSubmit","preventDefault","submissionData","key","numValue","parseFloat","isNaN","error","warn","fieldName","isCategoricalField","isScaleField","scaleFields","createScaleMenuItems","max","items","i","push","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","createCategoricalMenuItems","entries","map","label","parseInt","renderFeatureInputs","xs","sm","md","sx","display","alignItems","fullWidth","select","onChange","disabled","variant","margin","title","size","mt","ml","fontSize","control","checked","maxScale","type","InputProps","inputProps","step","mb","gutterBottom","color","paragraph","onClick","container","spacing"],"sources":["/Users/roaattaallah/Desktop/MLFlow_Project/frontend_2/src/components/PatientForm_new.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  TextField,\n  MenuItem,\n  Button,\n  FormControlLabel,\n  Checkbox,\n  Box,\n  Tooltip,\n  IconButton,\n  ButtonGroup\n} from '@mui/material';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\n\n// Dictionary for mapping numeric codes to human-readable values\nconst valueMappings = {\n  Gender: {\n    0: 'Male',\n    1: 'Female'\n  },\n  Ethnicity: {\n    0: 'Caucasian',\n    1: 'African American',\n    2: 'Asian',\n    3: 'Other'\n  },\n  EducationLevel: {\n    0: 'None',\n    1: 'High School',\n    2: 'Bachelor\\'s',\n    3: 'Higher'\n  },\n  Smoking: {\n    0: 'No',\n    1: 'Yes'\n  },\n  FamilyHistoryAlzheimers: {\n    0: 'No',\n    1: 'Yes'\n  },\n  CardiovascularDisease: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Diabetes: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Depression: {\n    0: 'No',\n    1: 'Yes'\n  },\n  HeadInjury: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Hypertension: {\n    0: 'No',\n    1: 'Yes'\n  },\n  MemoryComplaints: {\n    0: 'No',\n    1: 'Yes'\n  },\n  BehavioralProblems: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Confusion: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Disorientation: {\n    0: 'No',\n    1: 'Yes'\n  },\n  PersonalityChanges: {\n    0: 'No',\n    1: 'Yes'\n  },\n  DifficultyCompletingTasks: {\n    0: 'No',\n    1: 'Yes'\n  },\n  Forgetfulness: {\n    0: 'No',\n    1: 'Yes'\n  }\n};\n\n// Initial values for healthy patient\nconst healthyPatientProfile = {\n  Age: 45.0,\n  Gender: 0.0,\n  Ethnicity: 0.0,\n  EducationLevel: 3.0,\n  BMI: 22.0,\n  Smoking: 0.0,\n  AlcoholConsumption: 0.0,\n  PhysicalActivity: 2.0,\n  DietQuality: 5.0,\n  SleepQuality: 5.0,\n  FamilyHistoryAlzheimers: 0.0,\n  CardiovascularDisease: 0.0,\n  Diabetes: 0.0,\n  Depression: 0.0,\n  HeadInjury: 0.0,\n  Hypertension: 0.0,\n  SystolicBP: 110.0,\n  DiastolicBP: 70.0,\n  CholesterolTotal: 170.0,\n  CholesterolLDL: 90.0,\n  CholesterolHDL: 65.0,\n  CholesterolTriglycerides: 100.0,\n  MMSE: 30.0,\n  FunctionalAssessment: 10.0,\n  MemoryComplaints: 0.0,\n  BehavioralProblems: 0.0,\n  ADL: 10.0,\n  Confusion: 0.0,\n  Disorientation: 0.0,\n  PersonalityChanges: 0.0,\n  DifficultyCompletingTasks: 0.0,\n  Forgetfulness: 0.0\n};\n\n// Initial values for Alzheimer's patient\nconst alzheimersPatientProfile = {\n  Age: 78.0,\n  Gender: 0.0,\n  Ethnicity: 0.0,\n  EducationLevel: 1.0,\n  BMI: 26.5,\n  Smoking: 1.0,\n  AlcoholConsumption: 1.0,\n  PhysicalActivity: 0.0,\n  DietQuality: 2.0,\n  SleepQuality: 2.0,\n  FamilyHistoryAlzheimers: 1.0,\n  CardiovascularDisease: 1.0,\n  Diabetes: 1.0,\n  Depression: 1.0,\n  HeadInjury: 0.0,\n  Hypertension: 1.0,\n  SystolicBP: 148.0,\n  DiastolicBP: 90.0,\n  CholesterolTotal: 230.0,\n  CholesterolLDL: 155.0,\n  CholesterolHDL: 35.0,\n  CholesterolTriglycerides: 200.0,\n  MMSE: 19.0,\n  FunctionalAssessment: 4.0,\n  MemoryComplaints: 1.0,\n  BehavioralProblems: 1.0,\n  ADL: 5.0,\n  Confusion: 1.0,\n  Disorientation: 1.0,\n  PersonalityChanges: 1.0,\n  DifficultyCompletingTasks: 1.0,\n  Forgetfulness: 1.0\n};\n\n// Empty profile for initially clearing inputs\nconst emptyPatientProfile = {\n  Age: '',\n  Gender: '',\n  Ethnicity: '',\n  EducationLevel: '',\n  BMI: '',\n  Smoking: '',\n  AlcoholConsumption: '',\n  PhysicalActivity: '',\n  DietQuality: '',\n  SleepQuality: '',\n  FamilyHistoryAlzheimers: '',\n  CardiovascularDisease: '',\n  Diabetes: '',\n  Depression: '',\n  HeadInjury: '',\n  Hypertension: '',\n  SystolicBP: '',\n  DiastolicBP: '',\n  CholesterolTotal: '',\n  CholesterolLDL: '',\n  CholesterolHDL: '',\n  CholesterolTriglycerides: '',\n  MMSE: '',\n  FunctionalAssessment: '',\n  MemoryComplaints: '',\n  BehavioralProblems: '',\n  ADL: '',\n  Confusion: '',\n  Disorientation: '',\n  PersonalityChanges: '',\n  DifficultyCompletingTasks: '',\n  Forgetfulness: ''\n};\n\nconst PatientForm = ({ features, onSubmit }) => {\n  // State initialization - start with empty form\n  const [formData, setFormData] = useState(emptyPatientProfile);\n  const [missingValues, setMissingValues] = useState([]);\n  \n  // Version stamp to verify which version is loaded\n  console.log(\"PatientForm Version: REBUILT WITH BUTTONS - \" + new Date().toISOString());\n\n  // Function to load a patient profile\n  const loadProfile = (profile) => {\n    setFormData(profile);\n    setMissingValues([]);\n  };\n\n  // Function to clear all inputs\n  const clearInputs = () => {\n    setFormData(emptyPatientProfile);\n    setMissingValues([]);\n  };\n\n  // Initialize all fields from API feature descriptions\n  useEffect(() => {\n    if (features && Object.keys(features).length > 0) {\n      const initialFormData = {...formData};\n      \n      // For each feature from the API, ensure we have a value in our form\n      Object.keys(features).forEach(feature => {\n        if (!(feature in initialFormData)) {\n          initialFormData[feature] = getDefaultValueForFeature(feature);\n        }\n      });\n      \n      setFormData(initialFormData);\n    }\n  }, [features]);\n\n  // Helper function to get a default value based on feature type\n  const getDefaultValueForFeature = (feature) => {\n    if (isBinaryField(feature)) return 0;\n    if (feature.includes(\"Cholesterol\")) return 150;\n    if (feature === \"SystolicBP\") return 120;\n    if (feature === \"DiastolicBP\") return 80;\n    if (feature === \"BMI\") return 25;\n    return 0;\n  };\n\n  if (!features || Object.keys(features).length === 0) {\n    return null;\n  }\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n    \n    // Remove from missing values if it was marked as missing\n    if (missingValues.includes(name)) {\n      setMissingValues(missingValues.filter(item => item !== name));\n    }\n  };\n\n  const toggleMissingValue = (name) => {\n    if (missingValues.includes(name)) {\n      setMissingValues(missingValues.filter(item => item !== name));\n    } else {\n      setMissingValues([...missingValues, name]);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    // Create a copy of the form data\n    const submissionData = { ...formData };\n    \n    // Ensure all values are properly converted to numbers\n    Object.keys(submissionData).forEach(key => {\n      if (missingValues.includes(key)) {\n        submissionData[key] = null;\n      } else {\n        // Ensure all values are properly converted to numbers\n        // Use parseFloat for values that might have decimals\n        if (typeof submissionData[key] === 'string') {\n          const numValue = parseFloat(submissionData[key]);\n          if (!isNaN(numValue)) {\n            submissionData[key] = numValue;\n          }\n        } else if (submissionData[key] === '') {\n          // Handle empty string inputs\n          submissionData[key] = null;\n        } else if (typeof submissionData[key] !== 'number') {\n          // Try to convert any non-number and non-null values to numbers\n          try {\n            const numValue = parseFloat(submissionData[key]);\n            if (!isNaN(numValue)) {\n              submissionData[key] = numValue;\n            }\n          } catch (error) {\n            console.warn(`Failed to convert ${key} value to number:`, submissionData[key]);\n          }\n        }\n      }\n    });\n    \n    console.log('Sending patient data to API:', submissionData);\n    onSubmit(submissionData);\n  };\n\n  // Helper function to determine if a field should be a select or text input\n  const isBinaryField = (fieldName) => {\n    return fieldName in valueMappings && Object.keys(valueMappings[fieldName]).length === 2;\n  };\n\n  const isCategoricalField = (fieldName) => {\n    return fieldName in valueMappings && Object.keys(valueMappings[fieldName]).length > 2;\n  };\n\n  const isScaleField = (fieldName) => {\n    const scaleFields = {\n      'AlcoholConsumption': 3,\n      'PhysicalActivity': 3,\n      'DietQuality': 5,\n      'SleepQuality': 5\n    };\n    return fieldName in scaleFields ? scaleFields[fieldName] : false;\n  };\n\n  // Create menu items for a scale\n  const createScaleMenuItems = (max) => {\n    const items = [];\n    for (let i = 0; i <= max; i++) {\n      items.push(<MenuItem key={i} value={i}>{i}</MenuItem>);\n    }\n    return items;\n  };\n\n  // Create menu items for categorical fields\n  const createCategoricalMenuItems = (fieldName) => {\n    if (!valueMappings[fieldName]) return null;\n    \n    return Object.entries(valueMappings[fieldName]).map(([value, label]) => (\n      <MenuItem key={value} value={parseInt(value, 10)}>{label}</MenuItem>\n    ));\n  };\n\n  const renderFeatureInputs = () => {\n    return Object.keys(features).map(feature => {\n      // Skip rendering if feature isn't in our form data or API features\n      if (!(feature in formData)) return null;\n      \n      if (isBinaryField(feature)) {\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                select\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                {createCategoricalMenuItems(feature)}\n              </TextField>\n              <Tooltip title={features[feature] || `${feature} value`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      } else if (isCategoricalField(feature)) {\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                select\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                {createCategoricalMenuItems(feature)}\n              </TextField>\n              <Tooltip title={features[feature] || `${feature} value`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      } else if (isScaleField(feature)) {\n        const maxScale = isScaleField(feature);\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                select\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                {createScaleMenuItems(maxScale)}\n              </TextField>\n              <Tooltip title={`${features[feature]} (Scale 0-${maxScale})`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      } else {\n        return (\n          <Grid item xs={12} sm={6} md={4} key={feature}>\n            <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n              <TextField\n                name={feature}\n                label={feature}\n                fullWidth\n                type=\"number\"\n                value={missingValues.includes(feature) ? '' : formData[feature]}\n                onChange={handleInputChange}\n                disabled={missingValues.includes(feature)}\n                InputProps={{ \n                  inputProps: { \n                    step: feature === 'BMI' ? 0.1 : 1 \n                  } \n                }}\n                variant=\"outlined\"\n                margin=\"normal\"\n              />\n              <Tooltip title={features[feature] || `${feature} value`}>\n                <IconButton size=\"small\" sx={{ mt: 2.5, ml: 1 }}>\n                  <HelpOutlineIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </Box>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={missingValues.includes(feature)}\n                  onChange={() => toggleMissingValue(feature)}\n                />\n              }\n              label=\"Missing value\"\n            />\n          </Grid>\n        );\n      }\n    });\n  };\n\n  return (\n    <Card sx={{ mb: 3 }}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Patient Parameters\n        </Typography>\n        \n        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n          Enter the patient's information below. Missing values will be handled appropriately.\n        </Typography>\n\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"body2\" gutterBottom>\n            Load patient profile:\n          </Typography>\n          <ButtonGroup variant=\"contained\" aria-label=\"profile selection button group\">\n            <Button \n              onClick={() => loadProfile(healthyPatientProfile)}\n              color=\"success\"\n            >\n              Healthy Patient\n            </Button>\n            <Button \n              onClick={() => loadProfile(alzheimersPatientProfile)}\n              color=\"error\"\n            >\n              Alzheimer's Patient\n            </Button>\n          </ButtonGroup>\n        </Box>\n        \n        <form onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            {renderFeatureInputs()}\n            \n            <Grid item xs={12} sx={{ mt: 2 }}>\n              <Button \n                type=\"submit\" \n                variant=\"contained\" \n                color=\"primary\" \n                fullWidth\n                size=\"large\"\n              >\n                Make Prediction\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PatientForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}